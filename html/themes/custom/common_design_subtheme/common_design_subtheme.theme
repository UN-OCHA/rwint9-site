<?php

/**
 * @file
 * Preprocess functions for the Common Design subtheme.
 */

use Drupal\common_design_subtheme\FormElementOptional;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\media\MediaInterface;

/**
 * Implements hook_preprocess_taxonomy_term().
 *
 * Use the page title block for the title and display the local tasks below it.
 * We use common_design_get_block_render_array() that will cache the
 * render array of the blocks so that they are not re-rendered and displayed
 * again.
 *
 * @see common_design_preprocess_page()
 * @see common_design_get_block_render_array()
 */
function common_design_subtheme_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'] ?? NULL;
  $view_mode = $variables['view_mode'] ?? $variables['elements']['#view_mode'] ?? '';
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Prepare the title and local tasks so we have better control over where
  // to display them for content in full term.
  if (isset($term) && is_a($term, '\Drupal\taxonomy\TermInterface')) {
    if ($route_name === 'entity.taxonomy_term.canonical' && $view_mode === 'full') {
      common_design_set_page_title($variables, $term->label(), TRUE);
    }
    elseif ($route_name === 'entity.taxonomy_term.preview') {
      common_design_set_page_title($variables, $term->label(), FALSE);
    }
    elseif ($route_name === 'taxonomy_term_revision.view') {
      $label = t('Revision of %title from %date', [
        '%title' => $term->label(),
        '%date' => \Drupal::service('date.formatter')->format($term->getRevisionCreationTime()),
      ]);
      common_design_set_page_title($variables, $label, FALSE);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Use the page title block for the node title if the view mode was selected
 * in the theme settings.
 *
 * Important: this assumes there is a template for the view mode that uses
 * the `title` (and `local_tasks`) variables added by
 * common_design_use_node_page_title(). See `node--full.html.twig`.
 *
 * @see common_design_preprocess_page()
 * @see common_design_set_page_title()
 */
function common_design_subtheme_preprocess_node(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  $node = $variables['node'] ?? NULL;
  $view_mode = $variables['view_mode'] ?? '';

  // If the node view mode was selected to use the page title block for the
  // node title in the template, then we add the page title to the template
  // variables. We only do that if we are on the canonical node page or on
  // the node preview page.
  if (isset($node) && $route_name === 'entity.node.revision' && common_design_use_node_page_title($view_mode)) {
    common_design_set_page_title($variables, $node->label(), TRUE);
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove the default page title and local tasks blocks if they were already
 * rendered by a page title paragraph or when viewing full article terms.
 *
 * Do not render the page title block on river pages as they already have a
 * visually hidden title (the selected main menu item acts as visual cue).
 */
function common_design_subtheme_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Attempt to retrieve the term entity if the current page is a term page.
  // @see common_design_subtheme_preprocess_taxonomy_term()
  if ($route_name === 'entity.taxonomy_term.canonical') {
    $term = common_design_subtheme_get_entity_from_route('taxonomy_term');

    if (isset($term) && is_a($term, '\Drupal\taxonomy\TermInterface')) {
      // This gives us an array with the page view mode for the term.
      $build = \Drupal::entityTypeManager()
        ->getViewBuilder('taxonomy_term')
        ->view($term);

      $view_mode = $build['#view_mode'] ?? '';

      if ($view_mode === 'full') {
        common_design_hide_rendered_blocks_from_page($variables, [
          'page_title_block',
          'local_tasks_block',
        ]);
      }
    }
  }
  // Hide the page title block on the taxonomy term preview page.
  elseif ($route_name === 'entity.taxonomy_term.preview') {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
  // Hide the page title block on a taxonomy term revision page.
  elseif ($route_name === 'taxonomy_term_revision.view') {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
  // Hide the page title block on a node revision page.
  elseif ($route_name === 'entity.node.revision') {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
  // Remove the page title block from the search results page.
  elseif ($route_name === 'reliefweb_rivers.search.results') {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
  // Remove the page title block from the search converter page.
  elseif ($route_name === 'reliefweb_rivers.search.converter') {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
  // Remove the page title block on river pages.
  elseif (preg_match('#^reliefweb_rivers\.[^\.]+\.river$#', $route_name) === 1) {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
}

/**
 * Get an entity from the route match.
 *
 * @param string $entity_type
 *   Entity type.
 *
 * @return \Drupal\Core\Entity\EntityInterface|null
 *   Entity or NULL if not found.
 */
function common_design_subtheme_get_entity_from_route($entity_type) {
  $parameters = \Drupal::routeMatch()->getParameters();
  if ($parameters->has($entity_type)) {
    $entity = $parameters->get($entity_type);
    if ($entity instanceof EntityInterface) {
      return $entity;
    }
  }
  return NULL;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for the page title.
 *
 * Add a suggestion for the page title of non entity pages.
 */
function common_design_subtheme_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (strpos($route_name, 'entity.') !== 0) {
    $suggestions[] = 'page_title__wrapped';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a process callback to ensure that the editor link dialog "save"submit
 * button is not moved to the modal dialog's button area.
 *
 * Note: this the same workaround as used for the media library dialog.
 *
 * @see html/core/modules/media_library/media_library.module
 *
 * @todo move to the base theme or use the approach describe in
 * https://gist.github.com/opi/b855eb28cbeb4d01abe125e8c978d978
 */
function common_design_subtheme_form_editor_link_dialog_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['#after_build'][] = 'common_design_subtheme_editor_link_dialog_form_after_build';
}

/**
 * Form #after_build callback for editor_link_dialog form.
 */
function common_design_subtheme_editor_link_dialog_form_after_build(array $form, FormStateInterface $form_state) {
  // Remove .form-actions from the edit link dialog form. This prevents
  // the "Save" submit button from being moved into the dialog's button area and
  // breaking accessibility (tab to focus element) and causing a redirection
  // to the form page instead of adding the link to the editable area.
  //
  // @see \Drupal\Core\Render\Element\Actions::processActions
  // @see Drupal.behaviors.dialog.prepareDialogButtons
  //
  // @todo Remove this when https://www.drupal.org/project/drupal/issues/3089751
  // is fixed.
  if (isset($form['actions']['#attributes']['class'])) {
    $key = array_search('form-actions', $form['actions']['#attributes']['class']);
    if ($key !== FALSE) {
      unset($form['actions']['#attributes']['class'][$key]);
    }
  }
  return $form;
}

/**
 * Implements hook_theme().
 *
 * Add themes for the guideline edit forms.
 */
function common_design_subtheme_theme(array $existing, $type, $theme, $path) {
  $hooks = [
    'guideline_edit_form',
  ];

  return common_design_get_entity_edit_form_themes($hooks, $existing, $theme, $path);
}

/**
 * Implements hook_form_guideline_HOOK_alter().
 */
function common_design_subtheme_form_guideline_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form_state->get('form_display'))) {
    common_design_add_entity_edit_form_theme($form, $form_state);
  }
}

/**
 * Implements hook_preprocess_image_formatter().
 *
 * Force the linked images in a form to open in a new tab/window to prevent
 * quitting the form.
 *
 * We cannot easily detect if we are in a form, so we rely on the image style
 * to guess where this should apply.
 */
function common_design_subtheme_preprocess_image_formatter(array &$variables) {
  if (isset($variables['image_style']) && $variables['image_style'] === 'media_library') {
    $url = $variables['url'] ?? NULL;
    if (isset($url) && $url instanceof Url) {
      $attributes = $url->getOption('attributes') ?? [];
      $attributes['target'] = '_blank';
      $url->setOption('attributes', $attributes);
    }
  }
}

/**
 * Implements hook_preprocess_image_widget().
 *
 * Force the linked images in a form to open in a new tab/window to prevent
 * quitting the form.
 *
 * Another drupal nonsense prevents us from adding attributes to the link
 * generated by the file_link template (they are added to the wrapper...).
 * So we set the "target" attribute on the file_link element and in the
 * preprocess_file_link we extract it and put on the link itself.
 */
function common_design_subtheme_preprocess_image_widget(array &$variables) {
  foreach ($variables['data'] ?? [] as $key => $item) {
    if (strpos($key, 'file_') === 0 && isset($item['filename']['#theme'])) {
      if ($item['filename']['#theme'] === 'file_link') {
        $variables['data'][$key]['filename']['#attributes']['target'] = '_blank';
      }
    }
  }
}

/**
 * Implements hook_preprocess_file_link().
 *
 * Force the linked images in a form to open in a new tab/window to prevent
 * quitting the form.
 */
function common_design_subtheme_preprocess_file_link(array &$variables) {
  // @see common_design_subtheme_preprocess_image_widget() above.
  if (isset($variables['attributes']) && $variables['attributes'] instanceof Attribute) {
    $target = $variables['attributes']->offsetGet('target');
    $url = $variables['link']['#url'] ?? NULL;
    if (!empty($target) && isset($url)) {
      $attributes = $url->getOption('attributes') ?? [];
      $attributes['target'] = '_blank';
      $url->setOption('attributes', $attributes);
    }
    $variables['attributes']->offsetUnset('target');
  }
}

/**
 * Implements hook_preprocess_inline_entity_form_entity_table().
 *
 * Display a preview of the media in the inline entity form table and hide the
 * row being edited.
 */
function common_design_subtheme_preprocess_inline_entity_form_entity_table(array &$variables) {
  // Extract any media being displayed in the inline entity form.
  $media_entities = [];
  foreach (Element::children($variables['form']) as $key) {
    $entity = $variables['form'][$key]['#entity'] ?? NULL;
    if (isset($entity) && $entity instanceof MediaInterface) {
      $media_entities[$key] = $entity;
    }
  }

  if (!empty($media_entities)) {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');

    foreach (Element::children($variables['table']) as $key) {
      if (isset($media_entities[$key])) {
        $display = $view_builder->view($media_entities[$key], 'media_library');
        $display['#wrapper_attributes'] = $variables['table'][$key]['label']['#wrapper_attributes'] ?? [];
        $variables['table'][$key]['label'] = $display;

        // Hide rows being edited.
        if (isset($variables['form'][$key]['form'])) {
          $variables['table'][$key]['#attributes']['class'] = 'visually-hidden';
        }
      }
    }
  }
}

/**
 * Implements hook_reliefweb_form_mark_optional_alter().
 *
 * Mark form elements as optional.
 *
 * Note: we cannot use '#optional' as it has a different meaning in Drupal 9 so
 * we use '#not_required' to flag optional elements.
 */
function common_design_subtheme_reliefweb_form_mark_optional_alter(array &$element, array &$context) {
  FormElementOptional::markAsOptional($element, $context['form']);
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Add resource preloading to reduce time to first paint.
 */
function common_design_subtheme_page_attachments_alter(array &$attachments) {
  // Retrieve the version of the icon sprite.
  $theme_path = \Drupal::service('extension.path.resolver')->getPath('theme', 'common_design_subtheme');
  $rw_icons_sprite_version = @file_get_contents($theme_path . '/components/rw-icons/VERSION');
  if (!empty($rw_icons_sprite_version)) {
    $rw_icons_sprite_version = '?v=' . trim($rw_icons_sprite_version);
  }

  // Main SVG sprites and logos used across the site.
  $svg_sprites = [
    '/themes/custom/common_design_subtheme/img/logos/rw-logo-desktop.svg' => NULL,
    '/themes/custom/common_design_subtheme/img/logos/rw-logo-mobile.svg' => '(max-width: 768px)',
    '/themes/custom/common_design_subtheme/img/logos/ocha-logo-sprite.svg' => NULL,
    '/themes/custom/common_design_subtheme/components/rw-icons/img/rw-icons-sprite.svg' . $rw_icons_sprite_version => NULL,
    '/themes/custom/common_design_subtheme/img/logos/rw-logo-sprite.svg' => NULL,
  ];
  $index = 0;
  foreach ($svg_sprites as $path => $media) {
    $data = [
      '#type' => 'html_tag',
      '#tag' => 'link',
      '#attributes' => [
        'rel' => 'preload',
        'as' => 'image',
        'href' => Url::fromUserInput($path, ['absolute' => TRUE])->toString(),
      ],
      '#weight' => ($index + 1) / 10,
    ];
    if (!empty($media)) {
      $data['#attributes']['media'] = $media;
    }
    $attachments['#attached']['html_head'][] = [$data, $path];
    $index++;
  }

  // Google fonts.
  // @todo Remove once there is the same thing in the base theme.
  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'link',
      '#attributes' => [
        'rel' => 'preconnect',
        'href' => 'https://fonts.gstatic.com/',
        'crossorigin' => '',
      ],
      '#weight' => -2,
    ],
    'google_fonts_static',
  ];
  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'link',
      '#attributes' => [
        'rel' => 'preload',
        'as' => 'style',
        // Note: this needs to be kept in sync with the base theme fonts.
        'href' => 'https://fonts.googleapis.com/css?family=Roboto:ital,wght@0,300%3B0,400%3B0,500%3B0,700%3B0,900%3B1,400%3B1,700&display=swap',
      ],
      '#weight' => -1,
    ],
    'google_fonts_roboto',
  ];
}
