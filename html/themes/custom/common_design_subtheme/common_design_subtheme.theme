<?php

/**
 * @file
 * Preprocess functions for the Common Design subtheme.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_taxonomy_term().
 *
 * Use the page title block for the title and display the local tasks below it.
 * We use common_design_get_block_render_array() that will cache the
 * render array of the blocks so that they are not re-rendered and displayed
 * again.
 *
 * @see common_design_preprocess_page()
 * @see common_design_get_block_render_array()
 */
function common_design_subtheme_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'] ?? NULL;
  $view_mode = $variables['view_mode'] ?? $variables['elements']['#view_mode'] ?? '';
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Prepare the title and local tasks so we have better control over where
  // to display them for content in full term.
  if (isset($term) && is_a($term, '\Drupal\taxonomy\TermInterface')) {
    if ($route_name === 'entity.taxonomy_term.canonical' && $view_mode === 'full') {
      common_design_set_page_title($variables, $term->label(), TRUE);
    }
    elseif ($route_name === 'entity.taxonomy_term.preview') {
      common_design_set_page_title($variables, $term->label(), TRUE);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove the default page title and local tasks blocks if they were already
 * rendered by a page title paragraph or when viewing full article terms.
 *
 * Do not render the page title block on river pages as they already have a
 * visually hidden title (the selected main menu item acts as visual cue).
 */
function common_design_subtheme_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Attempt to retrieve the term entity if the current page is a term page.
  // @see common_design_subtheme_preprocess_taxonomy_term()
  if ($route_name === 'entity.taxonomy_term.canonical') {
    $term = common_design_subtheme_get_entity_from_route('taxonomy_term');

    if (isset($term) && is_a($term, '\Drupal\taxonomy\TermInterface')) {
      // This gives us an array with the page view mode for the term.
      $build = \Drupal::entityTypeManager()
        ->getViewBuilder('taxonomy_term')
        ->view($term);

      $view_mode = $build['#view_mode'] ?? '';

      if ($view_mode === 'full') {
        common_design_hide_rendered_blocks_from_page($variables, [
          'page_title_block',
          'local_tasks_block',
        ]);
      }
    }
  }
  // Hide the page title block on the taxonomy term preview page.
  elseif ($route_name === 'entity.taxonomy_term.preview') {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
  // Remove the page title block from the search results page.
  elseif ($route_name === 'reliefweb_rivers.search.results') {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
  // Remove the page title block on river pages.
  elseif (preg_match('#^reliefweb_rivers\.[^\.]+\.river$#', $route_name) === 1) {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
}

/**
 * Get an entity from the route match.
 *
 * @param string $entity_type
 *   Entity type.
 *
 * @return \Drupal\Core\Entity\EntityInterface|null
 *   Entity or NULL if not found.
 */
function common_design_subtheme_get_entity_from_route($entity_type) {
  $parameters = \Drupal::routeMatch()->getParameters();
  if ($parameters->has($entity_type)) {
    $entity = $parameters->get($entity_type);
    if ($entity instanceof EntityInterface) {
      return $entity;
    }
  }
  return NULL;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for the page title.
 *
 * Add a suggestion for the page title of non entity pages.
 */
function common_design_subtheme_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (strpos($route_name, 'entity.') !== 0) {
    $suggestions[] = 'page_title__wrapped';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a process callback to ensure that the editor link dialog "save"submit
 * button is not moved to the modal dialog's button area.
 *
 * Note: this the same workaround as used for the media library dialog.
 *
 * @see html/core/modules/media_library/media_library.module
 *
 * @todo move to the base theme or use the approach describe in
 * https://gist.github.com/opi/b855eb28cbeb4d01abe125e8c978d978
 */
function common_design_subtheme_form_editor_link_dialog_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['#after_build'][] = 'common_design_subtheme_editor_link_dialog_form_after_build';
}

/**
 * Form #after_build callback for editor_link_dialog form.
 */
function common_design_subtheme_editor_link_dialog_form_after_build(array $form, FormStateInterface $form_state) {
  // Remove .form-actions from the edit link dialog form. This prevents
  // the "Save" submit button from being moved into the dialog's button area and
  // breaking accessibility (tab to focus element) and causing a redirection
  // to the form page instead of adding the link to the editable area.
  //
  // @see \Drupal\Core\Render\Element\Actions::processActions
  // @see Drupal.behaviors.dialog.prepareDialogButtons
  //
  // @todo Remove this when https://www.drupal.org/project/drupal/issues/3089751
  // is fixed.
  if (isset($form['actions']['#attributes']['class'])) {
    $key = array_search('form-actions', $form['actions']['#attributes']['class']);
    if ($key !== FALSE) {
      unset($form['actions']['#attributes']['class'][$key]);
    }
  }
  return $form;
}
