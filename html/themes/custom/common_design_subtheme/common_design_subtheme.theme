<?php

/**
 * @file
 * Preprocess functions for the Common Design subtheme.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_taxonomy_term().
 *
 * Use the page title block for the title and display the local tasks below it.
 * We use common_design_get_block_render_array() that will cache the
 * render array of the blocks so that they are not re-rendered and displayed
 * again.
 *
 * @see common_design_preprocess_page()
 * @see common_design_get_block_render_array()
 */
function common_design_subtheme_preprocess_taxonomy_term(&$variables) {
  $view_mode = $variables['view_mode'] ?? $variables['elements']['#view_mode'] ?? '';

  // Prepare the title and local tasks so we have better control over where
  // to display them for content in full term.
  if ($view_mode === 'full') {
    $variables['title'] = common_design_get_block_render_array('page_title_block');
    $variables['local_tasks'] = common_design_get_block_render_array('local_tasks_block');
    // Copy the title attributes.
    if (!empty($variables['title']) && !empty($variables['title_attributes'])) {
      $variables['title']['#title_attributes'] = $variables['title_attributes'];
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove the default page title and local tasks blocks if they were already
 * rendered by a page title paragraph or when viewing full article terms.
 *
 * Do not render the page title block on river pages as they already have a
 * visually hidden title (the selected main menu item acts as visual cue).
 */
function common_design_subtheme_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Attempt to retrieve the term entity if the current page is a term page.
  if ($route_name === 'entity.taxonomy_term.canonical') {
    $term = common_design_subtheme_get_entity_from_route('taxonomy_term');
  }
  // Remove the page title block on river pages.
  elseif (preg_match('#^reliefweb_rivers\.[^\.]+\.river$#', $route_name) === 1) {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }

  // If the term variable is defined then we assume we are on a term page.
  // We retrieve the view mode for the page and compare it against the settings
  // to render the page title inside the term. If so, we hide the page title
  // and local tasks blocks from their original region in the page.
  if (isset($term) && is_a($term, '\Drupal\taxonomy\TermInterface')) {
    // This gives us an array with the page view mode for the term.
    $build = \Drupal::entityTypeManager()
      ->getViewBuilder('taxonomy_term')
      ->view($term);

    $view_mode = $build['#view_mode'] ?? '';

    if ($view_mode === 'full') {
      common_design_hide_rendered_blocks_from_page($variables, [
        'page_title_block',
        'local_tasks_block',
      ]);
    }
  }
}

/**
 * Get an entity from the route match.
 *
 * @param string $entity_type
 *   Entity type.
 *
 * @return \Drupal\Core\Entity\EntityInterface|null
 *   Entity or NULL if not found.
 */
function common_design_subtheme_get_entity_from_route($entity_type) {
  $parameters = \Drupal::routeMatch()->getParameters();
  if ($parameters->has($entity_type)) {
    $entity = $parameters->get($entity_type);
    if ($entity instanceof EntityInterface) {
      return $entity;
    }
  }
  return NULL;
}

function common_design_subtheme_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['node_edit_form'];
}

//function common_design_subtheme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
//  dpm($form);
//}


function common_design_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'node_edit_form') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $content_type = $node->bundle();
    }
    else {
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $content_type = $path_args[3];
    }
    $suggestions[] = 'node_edit_form__' . $content_type;
  }
}
