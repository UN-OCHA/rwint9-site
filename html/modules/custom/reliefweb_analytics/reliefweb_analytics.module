<?php

/**
 * @file
 * ReliefWeb Analytics module file.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Component\Serialization\Json;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\reliefweb_utility\Helpers\DateHelper;
use Drupal\reliefweb_utility\Helpers\EntityHelper;

/**
 * Add datalayer dimensions for google tag manager.
 *
 * Note: the google_tag module store snippets on files for caching even when
 * instructed to add the snippets inline. As a result we cannot easily add
 * custom dimensions per entity so we inject them ourselves here.
 *
 * @todo if some dataLayer snippet is added via the UI or whatever, then this
 * may need some refactoring to avoid overriding the dataLayer.
 */
function reliefweb_analytics_page_attachments(array &$attachments) {
  $container = \Drupal::entityTypeManager()
    ?->getStorage('google_tag_container')
    ?->load('default');

  // Check if we should add the custom dimensions.
  if (!isset($container) || !$container->insertSnippet()) {
    return;
  }

  $dimensions = [];
  $dimensions += reliefweb_analytics_get_entity_dimensions();
  $dimensions += reliefweb_analytics_get_user_dimensions();

  $datalayer = array_filter($dimensions);
  if (!empty($datalayer)) {
    // Sort the dimensions.
    ksort($datalayer, SORT_NATURAL);

    // Add the datalayer javascript.
    $datalayer_json = Json::encode($datalayer);
    if (!empty($datalayer_json)) {
      $variable = $container->variableClean('data_layer');
      $content = $variable . ' = [' . $datalayer_json . '];';

      $attachments['#attached']['html_head'][] = [
        [
          '#type' => 'html_tag',
          // @see \Drupal\google_tag\Entity\ContainerManager::getScriptAttachments()
          // Try to insert that just before the google tag script.
          '#weight' => 8,
          '#tag' => 'script',
          '#value' => new FormattableMarkup($content, []),
          '#attributes' => [
            'type' => 'text/javascript',
          ],
        ],
        'reliefweb_datalayer',
      ];
    }
  }
}

/**
 * Get the dimensions for the route entity if defined.
 *
 * @return array
 *   Dimensions for the entity.
 */
function reliefweb_analytics_get_entity_dimensions() {
  $dimensions = [];

  // Get the entity for the current request if any.
  $entity = EntityHelper::getEntityFromRoute();
  if (!isset($entity)) {
    return [];
  }

  // We only handle dimensions on nodes and terms.
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id !== 'node' && $entity_type_id !== 'taxonomy_term') {
    return [];
  }

  $cache = \Drupal::cache();
  $cache_id = 'reliefweb_analytics:entity:' . $entity->uuid();

  // Try to load the computed dimensions from the cache.
  $cache_object = $cache->get($cache_id);
  if (!empty($cache_object->data)) {
    return $cache_object->data;
  }

  // Use the untranslated entity for consistent dimensions.
  $entity = $entity->getUntranslated();

  // Cache metadata accumulator.
  $cache_metadata = CacheableMetadata::createFromObject($entity);

  // Set the dimensions for the entity.
  switch ($entity->bundle()) {
    // Nodes.
    case 'report':
      $dimensions = [
        'dimension1' => 'Report',
        'dimension2' => reliefweb_analytics_get_terms($entity, 'field_content_format', $cache_metadata),
        'dimension3' => reliefweb_analytics_get_terms($entity, 'field_ocha_product', $cache_metadata),
        'dimension4' => reliefweb_analytics_get_terms($entity, 'field_language', $cache_metadata),
        'dimension5' => reliefweb_analytics_get_terms($entity, 'field_primary_country', $cache_metadata),
        'dimension6' => reliefweb_analytics_get_terms($entity, 'field_country', $cache_metadata),
        'dimension7' => reliefweb_analytics_get_terms($entity, 'field_source', $cache_metadata),
        'dimension8' => reliefweb_analytics_get_terms($entity, 'field_theme', $cache_metadata),
        'dimension9' => reliefweb_analytics_get_terms($entity, 'field_disaster', $cache_metadata),
        'dimension10' => reliefweb_analytics_get_terms($entity, 'field_disaster_type', $cache_metadata),
        // Disable vulnerable group field (#kUklB1e4).
        /*'dimension11' => reliefweb_analytics_get_terms($entity, 'field_vulnerable_groups'),*/
        'dimension13' => reliefweb_analytics_format_date($entity, 'created'),
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
        'dimension22' => reliefweb_analytics_get_terms_id($entity, 'field_primary_country', $cache_metadata),
        'dimension23' => reliefweb_analytics_get_terms_id($entity, 'field_disaster', $cache_metadata),
      ];
      break;

    case 'job':
      $dimensions = [
        'dimension1' => 'Job',
        'dimension4' => reliefweb_analytics_get_terms($entity, 'field_language', $cache_metadata),
        'dimension6' => reliefweb_analytics_get_terms($entity, 'field_country', $cache_metadata),
        'dimension7' => reliefweb_analytics_get_terms($entity, 'field_source', $cache_metadata),
        'dimension8' => reliefweb_analytics_get_terms($entity, 'field_theme', $cache_metadata),
        'dimension13' => reliefweb_analytics_format_date($entity, 'created'),
        'dimension15' => reliefweb_analytics_get_terms($entity, 'field_job_type', $cache_metadata),
        'dimension16' => reliefweb_analytics_get_terms($entity, 'field_job_experience', $cache_metadata),
        'dimension17' => reliefweb_analytics_get_terms($entity, 'field_career_categories', $cache_metadata),
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
      ];
      break;

    case 'training':
      $dimensions = [
        'dimension1' => 'Training',
        'dimension4' => reliefweb_analytics_get_terms($entity, 'field_language', $cache_metadata),
        'dimension6' => reliefweb_analytics_get_terms($entity, 'field_country', $cache_metadata),
        'dimension7' => reliefweb_analytics_get_terms($entity, 'field_source', $cache_metadata),
        'dimension8' => reliefweb_analytics_get_terms($entity, 'field_theme', $cache_metadata),
        'dimension13' => reliefweb_analytics_format_date($entity, 'created'),
        'dimension14' => (string) $entity->field_cost->value,
        'dimension17' => reliefweb_analytics_get_terms($entity, 'field_career_categories', $cache_metadata),
        'dimension18' => reliefweb_analytics_get_terms($entity, 'field_training_type', $cache_metadata),
        'dimension19' => reliefweb_analytics_get_terms($entity, 'field_training_format', $cache_metadata),
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
      ];
      break;

    case 'topic':
      $dimensions = [
        'dimension1' => 'Topic',
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
      ];
      break;

    case 'blog_post':
      $dimensions = [
        'dimension1' => 'Blog post',
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
      ];
      break;

    case 'book':
      $dimensions = [
        'dimension1' => 'Book page',
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
      ];
      break;

    // Taxonomy terms.
    case 'country':
      $dimensions = [
        'dimension1' => 'Country',
        'dimension6' => (string) $entity->label(),
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
      ];
      break;

    case 'disaster':
      $dimensions = [
        'dimension1' => 'Disaster',
        'dimension5' => reliefweb_analytics_get_terms($entity, 'field_primary_country', $cache_metadata),
        'dimension6' => reliefweb_analytics_get_terms($entity, 'field_country', $cache_metadata),
        'dimension9' => (string) $entity->label(),
        'dimension10' => reliefweb_analytics_get_terms($entity, 'field_disaster_type', $cache_metadata),
        'dimension13' => reliefweb_analytics_format_date($entity, 'field_disaster_date'),
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
      ];
      break;

    case 'source':
      $dimensions = [
        'dimension1' => 'Organization',
        'dimension6' => reliefweb_analytics_get_terms($entity, 'field_country', $cache_metadata),
        'dimension7' => (string) $entity->label(),
        'dimension20' => (string) $entity->getModerationStatusLabel(),
        'dimension21' => $entity->id(),
      ];
      break;
  }

  $dimensions = array_filter($dimensions);

  // Cache the dimensions permanently until the entity or its dependencies are
  // changed.
  $cache->set($cache_id, $dimensions, Cache::PERMANENT, $cache_metadata->getCacheTags());

  return $dimensions;
}

/**
 * Get the dimensions for the current user.
 *
 * @return array
 *   Dimensions for the user.
 */
function reliefweb_analytics_get_user_dimensions() {
  $user = \Drupal::currentUser();

  $cache = \Drupal::cache();
  $cache_id = 'reliefweb_analytics:user:' . $user->id();

  // Try to load the computed dimensions from the cache.
  $cache_object = \Drupal::cache()->get($cache_id);
  if (!empty($cache_object->data)) {
    return $cache_object->data;
  }

  // Retrieve the roles for the current user account.
  $roles = [];
  if (!$user->isAuthenticated()) {
    $roles[] = 'anonymous user';
  }
  else {
    $roles[] = 'authenticated user';

    $role_ids = $user->getRoles(TRUE);
    if (!empty($role_ids)) {
      $role_entities = \Drupal::entityTypeManager()
        ->getStorage('user_role')
        ->loadMultiple($role_ids);
      foreach ($role_entities as $role_entity) {
        $roles[] = (string) $role_entity->label();
      }
    }
  }

  $dimensions = ['dimension12' => implode(', ', $roles)];

  // Cache the dimensions permanently until the user is changed.
  $cache->set($cache_id, $dimensions, Cache::PERMANENT, ['user:' . $user->id()]);

  return $dimensions;
}

/**
 * Get the term labels from an entity reference field.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   Entity.
 * @param string $field
 *   Field.
 * @param \Drupal\Core\Cache\CacheableMetadata $cache_metadata
 *   The accumulated cache metadata.
 *
 * @return string
 *   Comma separated list of term names.
 */
function reliefweb_analytics_get_terms(FieldableEntityInterface $entity, $field, CacheableMetadata $cache_metadata) {
  $terms = [];
  if ($entity->hasField($field) && !$entity->get($field)->isEmpty()) {
    foreach ($entity->get($field)->referencedEntities() as $term) {
      $terms[] = (string) $term->getUntranslated()->label();
      $cache_metadata->addCacheTags($term->getCacheTags());
    }
  }
  return implode(', ', $terms);
}

/**
 * Get the term IDs from an entity reference field.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   Entity.
 * @param string $field
 *   Field.
 * @param \Drupal\Core\Cache\CacheableMetadata $cache_metadata
 *   The accumulated cache metadata.
 *
 * @return string
 *   Comma separated list of term Ids.
 */
function reliefweb_analytics_get_terms_id(FieldableEntityInterface $entity, $field, CacheableMetadata $cache_metadata) {
  $terms = [];
  if ($entity->hasField($field) && !$entity->get($field)->isEmpty()) {
    foreach ($entity->get($field)->referencedEntities() as $term) {
      $terms[] = (string) $term->id();
      $cache_metadata->addCacheTags($term->getCacheTags());
    }
  }
  return implode(', ', $terms);
}

/**
 * Format a date field to use as custom dimension.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   Entity.
 * @param string $field
 *   Field.
 *
 * @return string
 *   Formatted date.
 */
function reliefweb_analytics_format_date(FieldableEntityInterface $entity, $field) {
  if ($entity->hasField($field) && !$entity->get($field)->isEmpty()) {
    $date = $entity->get($field)->value;
    return DateHelper::format($date, 'custom', 'Y-m-d');
  }
  return '';
}
