<?php

/**
 * @file
 * Module file for the job importer.
 */

declare(strict_types=1);

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\ocha_content_classification\Entity\ClassificationWorkflowInterface;
use Drupal\reliefweb_entities\Entity\Job;
use Drupal\reliefweb_import\Plugin\ReliefWebImporterPluginInterface;

/**
 * Implements hook_ENTITY_TYPE_presave() for node.
 */
function reliefweb_import_node_presave(EntityInterface $entity): void {
  if ($entity instanceof Job && !empty($entity->_is_importing)) {
    $status = $entity->getModerationStatus();

    // Set the status to draft/on-hold if there were validation errors.
    if ($status !== 'refused' && !empty($entity->_import_errors)) {
      $status = \Drupal::state()->get('reliefweb_import_status_when_errors', 'draft');
      $entity->setModerationStatus($status);
    }

    // Set the revision user to the System user to differentiate modifications
    // made via the UI from automated ones. We need to do that here so that
    // the Job::preSave() uses the user associated with the import feed when
    // determining the status to use based on the user posting rights.
    $entity->setRevisionUserId(2);
  }
}

/**
 * Implements hook_ocha_content_classification_post_entity_presave().
 *
 * Update the entity moderation status based on the classification status.
 */
function reliefweb_import_ocha_content_classification_post_entity_presave(EntityInterface $entity): void {
  $importer = reliefweb_import_get_entity_importer($entity);
  if (!isset($importer)) {
    return;
  }

  $prevent_publication = $importer->getPluginSetting('classification.prevent_publication', FALSE, FALSE);
  if (!empty($prevent_publication)) {
    reliefweb_entities_adjust_moderation_status_based_on_classification_status($entity);
  }
}

/**
 * Implements hook_ocha_content_classification_skip_classification_alter().
 */
function reliefweb_import_ocha_content_classification_skip_classification_alter(bool &$skip, ClassificationWorkflowInterface $workflow, array $context) {
  if (!isset($context['entity'])) {
    return;
  }

  $importer = reliefweb_import_get_entity_importer($context['entity']);
  if (!isset($importer)) {
    return;
  }

  $importer->alterContentClassificationSkipClassification($skip, $workflow, $context);
}

/**
 * Implements hook_ocha_content_classification_user_permission_check_alter().
 */
function reliefweb_import_ocha_content_classification_user_permission_check_alter(bool &$check, AccountInterface $account, array $context) {
  if (!isset($context['entity'])) {
    return;
  }

  $importer = reliefweb_import_get_entity_importer($context['entity']);
  if (!isset($importer)) {
    return;
  }

  $importer->alterContentClassificationUserPermissionCheck($check, $account, $context);
}

/**
 * Implements hook_ocha_content_classification_specified_field_check_alter().
 */
function reliefweb_import_ocha_content_classification_specified_field_check_alter(array &$fields, ClassificationWorkflowInterface $workflow, array $context) {
  if (!isset($context['entity'])) {
    return;
  }

  $importer = reliefweb_import_get_entity_importer($context['entity']);
  if (!isset($importer)) {
    return;
  }

  // Let the importer alter the list of fields to check.
  $importer->alterContentClassificationSpecifiedFieldCheck($fields, $workflow, $context);
}

/**
 * Implements hook_ocha_content_classification_force_field_update_alter().
 */
function reliefweb_import_ocha_content_classification_force_field_update_alter(array &$fields, ClassificationWorkflowInterface $workflow, array $context) {
  if (!isset($context['entity'])) {
    return;
  }

  $importer = reliefweb_import_get_entity_importer($context['entity']);
  if (!isset($importer)) {
    return;
  }

  // Let the importer decide which fields can be forcibly updated.
  $importer->alterContentClassificationForceFieldUpdate($fields, $workflow, $context);
}

/**
 * Implements hook_ocha_content_classification_force_field_update_alter().
 */
function reliefweb_import_ocha_content_classification_classified_fields_alter(array &$fields, ClassificationWorkflowInterface $workflow, array $context) {
  if (!isset($context['entity'])) {
    return;
  }

  $importer = reliefweb_import_get_entity_importer($context['entity']);
  if (!isset($importer)) {
    return;
  }

  // Let the importer decide which entity fields to update.
  $importer->alterContentClassificationClassifiedFields($fields, $workflow, $context);
}

/**
 * Get the plugin used to import the entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 *
 * @return ?\Drupal\reliefweb_import\Plugin\ReliefWebImporterPluginInterface
 *   The importer plugin if any.
 *
 * @todo Maybe we should store a reference to the importer in the entity.
 */
function reliefweb_import_get_entity_importer(EntityInterface $entity): ?ReliefWebImporterPluginInterface {
  if (isset($entity->reliefweb_importer)) {
    return $entity->reliefweb_importer ?: NULL;
  }

  if (!$entity instanceof ContentEntityInterface) {
    return NULL;
  }

  if (!$entity->hasField('field_post_api_provider') || $entity->get('field_post_api_provider')->isEmpty()) {
    $entity->reliefweb_importer = FALSE;
    return NULL;
  }

  $plugin_manager = \Drupal::service('plugin.manager.reliefweb_import.reliefweb_importer');

  // Get the list of import plugins.
  $definitions = $plugin_manager->getDefinitions();
  if (empty($definitions)) {
    $entity->reliefweb_importer = FALSE;
    return NULL;
  }

  // Retrieve the provider UUID from the entity.
  $provider_uuid = $entity->get('field_post_api_provider')->entity?->uuid();
  if (empty($provider_uuid)) {
    $entity->reliefweb_importer = FALSE;
    return NULL;
  }

  $state = \Drupal::state();
  foreach (array_keys($definitions) as $plugin_id) {
    $key = 'reliefweb_import.plugin.importer.' . $plugin_id . '.provider_uuid';
    if ($state->get($key) === $provider_uuid) {
      // Store the importer so we don't have to retrieve in the multiple
      // hook implementations.
      $entity->reliefweb_importer = $plugin_manager->getPlugin($plugin_id);
      return $entity->reliefweb_importer;
    }
  }

  $entity->reliefweb_importer = FALSE;
  return NULL;
}

/**
 * Use Puppeteer to extract PDF file from the page.
 */
function reliefweb_import_extract_pdf_file(string $url, string $selector, string $pdf_element, string $attribute = 'href'): ?string {
  $snap_url = \Drupal::config('reliefweb_import.settings')->get('snap_url');

  $query = [
    'service' => 'reliefweb_import',
    'url' => $url,
    'selector' => $selector,
    'element' => $pdf_element,
    'attribute' => $attribute,
  ];

  $extract_url .= '?' . UrlHelper::buildQuery($query);
  $options = [
    'headers' => [
      'X-Forwarded-For' => Drupal::request()->getClientIp(),
      'User-Agent'      => $_SERVER['HTTP_USER_AGENT'],
      'http_errors'     => FALSE,
    ],
    'method' => 'POST',
  ];

  // Use CHR if installed, otherwise use Drupal built-in http_request.
  if (\Drupal::service('module_handler')->moduleExists('chr')) {
    $output = chr_curl_http_request($extract_url, $options);
  }
  else {
    try {
      $output = \Drupal::httpClient()->post($extract_url, $options);
    }
    catch (Exception $e) {
      \Drupal::logger('reliefweb_import')->error('%e Exception: Failed to get a response for "%u".', [
        '%e' => get_class($e),
        '%u' => $url,
      ]);

      return '';
    }
  }

  // Basic error checking.
  if ($output->getStatusCode() != 200) {
    \Drupal::logger('reliefweb_import')->error('Failed to extract PDF from "%u".', ['%u' => $url]);
    return '';
  }

  $body = $output->getBody()->getContents();
  if (empty($body)) {
    \Drupal::logger('reliefweb_import')->error('Failed to extract PDF from "%u".', ['%u' => $url]);
    return '';
  }

  $body = json_decode($body, TRUE);

  return $body['pdf'] ?? '';
}
