<?php

/**
 * @file
 * Contains hook implementations for this module.
 */

use Aws\BedrockRuntime\BedrockRuntimeClient;
use Aws\Comprehend\ComprehendClient;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter().
 */
function reliefweb_openai_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (preg_match('/node_(add|.*_edit)_form/', $form_id)) {
    $entity_types = [
      'node' => [
        'report',
        'job',
      ],
    ];
    $entity = $form_state->getFormObject()->getEntity();

    if (!empty($entity_types) && array_key_exists($entity->getEntityTypeId(), $entity_types)) {
      if (in_array($entity->bundle(), $entity_types[$entity->getEntityTypeId()])) {
        $form['chatgpt_suggest'] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#title' => t('Suggest humanitarian themes using ChatGPT'),
        ];

        $form['chatgpt_suggest']['chatgpt_response'] = [
          '#type' => 'markup',
          '#markup' => t('chatgpt can attempt to suggest possible humanitarian themes to use.'),
          '#prefix' => '<div id="chatgpt-suggest-response">',
          '#suffix' => '</div>',
        ];

        $form['chatgpt_suggest']['do_suggest'] = [
          '#type' => 'button',
          '#value' => t('Suggest humanitarian theme(s) - ChatGPT'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'reliefweb_openai_content_node_suggest_chatgpt',
            'wrapper' => 'chatgpt-suggest-response',
          ],
        ];

        $form['aws_comprehend'] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#title' => t('Suggest humanitarian themes using AWS Comprehend'),
        ];

        $form['aws_comprehend']['aws_response'] = [
          '#type' => 'markup',
          '#markup' => t('AWS Comprehend can attempt to suggest possible classification terms to use as taxonomy.'),
          '#prefix' => '<div id="aws-comprehend-suggest-response">',
          '#suffix' => '</div>',
        ];

        $form['aws_comprehend']['aws_do_suggest'] = [
          '#type' => 'button',
          '#value' => t('Suggest humanitarian theme(s) - AWS Comprehend'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'reliefweb_openai_content_node_suggest_aws',
            'wrapper' => 'aws-comprehend-suggest-response',
          ],
        ];

        $form['aws_claude'] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#title' => t('Suggest humanitarian themes using Claude'),
        ];

        $form['aws_claude']['aws_response'] = [
          '#type' => 'markup',
          '#markup' => t('Claudecan attempt to suggest possible classification terms to use as taxonomy.'),
          '#prefix' => '<div id="aws-claude-suggest-response">',
          '#suffix' => '</div>',
        ];

        $form['aws_claude']['aws_do_suggest'] = [
          '#type' => 'button',
          '#value' => t('Suggest humanitarian theme(s) - AWS Comprehend'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'reliefweb_openai_content_node_suggest_aws_claude',
            'wrapper' => 'aws-claude-suggest-response',
          ],
        ];

        $form['azure'] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#title' => t('Suggest humanitarian themes using Azure'),
        ];

        $form['azure']['azure_response'] = [
          '#type' => 'markup',
          '#markup' => t('Azure can attempt to suggest possible classification terms to use as taxonomy.'),
          '#prefix' => '<div id="azure-suggest-response">',
          '#suffix' => '</div>',
        ];

        $form['azure']['azure_do_suggest'] = [
          '#type' => 'button',
          '#value' => t('Suggest humanitarian theme(s) - Azure'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'reliefweb_openai_content_node_suggest_azure',
            'wrapper' => 'azure-suggest-response',
          ],
        ];
      }
    }
  }
}

/**
 * The AJAX callback for suggesting taxonomy.
 *
 * @param array $form
 *   The node form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The HTML response.
 */
function reliefweb_openai_content_node_suggest_chatgpt(array &$form, FormStateInterface $form_state) {
  $body = $form_state->getValue('body')[0]['value'];

  if (!empty($body)) {
    $body = Unicode::truncate(strip_tags(trim($body)), 3900, TRUE);
    $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
    $body = preg_replace("/  +/", ' ', $body);
    $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

    $prompt = 'Extract the humanitarian theme (One of Agriculture, Camp Coordination and Camp Management, Climate Change and Environment, Contributions, Coordination, Disaster Management, Education, Food and Nutrition, Gender, Health, HIV/AIDS, Humanitarian Financing, Logistics and Telecommunications, Mine Action, Peacekeeping and Peacebuilding, Protection and Human Rights, Recovery and Reconstruction, Safety and Security, Shelter and Non-Food Items, Water Sanitation Hygiene) and country from the text below.' . "\n\n" . $body;

    if (isset($form['field_job_experience'])) {
      $prompt = 'Extract the required years of job experience, career category, humanitarian theme (One of Agriculture, Camp Coordination and Camp Management, Climate Change and Environment, Contributions, Coordination, Disaster Management, Education, Food and Nutrition, Gender, Health, HIV/AIDS, Humanitarian Financing, Logistics and Telecommunications, Mine Action, Peacekeeping and Peacebuilding, Protection and Human Rights, Recovery and Reconstruction, Safety and Security, Shelter and Non-Food Items, Water Sanitation Hygiene) and country from the text below.' . "\n\n" . $body;
    }

    $result = reliefweb_openai_http_call_chat(
      [
        'model' => 'gpt-3.5-turbo-16k',
        'messages' => [
          [
            'role' => 'user',
            'content' => $prompt,
          ],
        ],
        'temperature' => .8,
        'max_tokens' => 14500,
      ],
    );

    $text = $result['choices'][0]['message']['content'] ?? 'undecided';
    $text = str_replace("\n", '<br>', $text);

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#chatgpt-suggest-response', $text));
    return $response;
  }
}

/**
 * The AJAX callback for suggesting taxonomy.
 *
 * @param array $form
 *   The node form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The HTML response.
 */
function reliefweb_openai_content_node_suggest_azure(array &$form, FormStateInterface $form_state) {
  $body = $form_state->getValue('body')[0]['value'];

  if (!empty($body)) {
    $body = Unicode::truncate(strip_tags(trim($body)), 9999, TRUE);
    $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
    $body = preg_replace("/  +/", ' ', $body);
    $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

    $prompt = 'Extract the humanitarian theme (One of Agriculture, Camp Coordination and Camp Management, Climate Change and Environment, Contributions, Coordination, Disaster Management, Education, Food and Nutrition, Gender, Health, HIV/AIDS, Humanitarian Financing, Logistics and Telecommunications, Mine Action, Peacekeeping and Peacebuilding, Protection and Human Rights, Recovery and Reconstruction, Safety and Security, Shelter and Non-Food Items, Water Sanitation Hygiene) and country from the text below.' . "\n\n" . $body;

    if (isset($form['field_job_experience'])) {
      $prompt = 'Extract the required years of job experience, career category, humanitarian theme (One of Agriculture, Camp Coordination and Camp Management, Climate Change and Environment, Contributions, Coordination, Disaster Management, Education, Food and Nutrition, Gender, Health, HIV/AIDS, Humanitarian Financing, Logistics and Telecommunications, Mine Action, Peacekeeping and Peacebuilding, Protection and Human Rights, Recovery and Reconstruction, Safety and Security, Shelter and Non-Food Items, Water Sanitation Hygiene) and country from the text below.' . "\n\n" . $body;
    }

    $result = reliefweb_openai_http_call_azure(
      [
        'messages' => [
          [
            'role' => 'system',
            'content' => 'You are an AI assistant that helps people find information.',
          ],
          [
            'role' => 'user',
            'content' => $prompt,
          ],
        ],
      ],
    );

    $text = $result['choices'][0]['message']['content'] ?? 'undecided';
    $text = str_replace("\n", '<br>', $text);

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#azure-suggest-response', $text));
    return $response;
  }
}

/**
 * Make the call.
 */
function reliefweb_openai_http_call($query) {
  $config = \Drupal::config('reliefweb_openai.settings');

  $http_client = \Drupal::httpClient();
  $url = 'https://api.openai.com/v1/completions';

  $headers = [
    'Content-Type' => 'application/json',
    'Authorization' => 'Bearer ' . $config->get('token'),
  ];

  $response = $http_client->request(
    'POST',
    $url,
    [
      'headers' => $headers,
      'json' => $query,
    ],
  );

  $body = $response->getBody() . '';
  return json_decode($body, TRUE);
}

/**
 * Make chat call.
 */
function reliefweb_openai_http_call_chat($query) {
  $config = \Drupal::config('reliefweb_openai.settings');

  $http_client = \Drupal::httpClient();
  $url = 'https://api.openai.com/v1/chat/completions';

  $headers = [
    'Content-Type' => 'application/json',
    'Authorization' => 'Bearer ' . $config->get('token'),
  ];

  $response = $http_client->request(
    'POST',
    $url,
    [
      'headers' => $headers,
      'json' => $query,
    ],
  );

  $body = $response->getBody() . '';
  return json_decode($body, TRUE);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Check if job is a tender or not.
 */
function reliefweb_openai_node_update(EntityInterface $entity) {
  if (!$entity->bundle() == 'job') {
    return;
  }

  if ($entity->getModerationStatus() != 'pending') {
    return;
  }

  if (!$entity->original) {
    return;
  }

  if ($entity->getModerationStatus() == $entity->original->getModerationStatus()) {
    return;
  }

  $body = $entity->body->value;

  if (empty($body)) {
    return;
  }

  $body = Unicode::truncate(strip_tags(trim($body)), 8000, TRUE);
  $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
  $body = preg_replace("/  +/", ' ', $body);
  $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

  $result = reliefweb_openai_http_call_chat(
    [
      'model' => 'gpt-3.5-turbo-16k',
      'messages' => [
        [
          'role' => 'user',
          'content' => 'Is the following job opening a tender or not, respond with yes or no:\n\n"' . $body . '"',
        ],
      ],
      'temperature' => 1,
      'max_tokens' => 14500,
    ],
  );

  $answer = $result['choices'][0]['message']['content'] ?? 'undecided';

  switch (strtolower($answer)) {
    case 'yes':
    case 'yes.':
      $text = 'It looks like this is a tender.';
      break;

    case 'no':
    case 'no.':
      $text = 'It looks like this is NOT a tender.';
      break;

    default:
      $text = 'Not sure if this is a tender or not.';
      break;

  }

  // Reload node and set message as admin.
  $entity = Node::load($entity->id());
  $entity->setNewRevision();
  $entity->setRevisionLogMessage($text);
  $entity->setRevisionUserId(1);
  $entity->save();
}

/**
 * Use AWS Comprehend.
 */
function reliefweb_openai_content_node_suggest_aws(array &$form, FormStateInterface $form_state) {
  $body = $form_state->getValue('body')[0]['value'];

  if (!empty($body)) {
    $body = Unicode::truncate(strip_tags(trim($body)), 3900, TRUE);
    $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
    $body = preg_replace("/  +/", ' ', $body);
    $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

    $config = \Drupal::config('reliefweb_openai.settings');

    $access_key = $config->get('aws_access_key');
    $secret_key = $config->get('aws_secret_key');
    $region = $config->get('aws_region');
    $endpoint = $config->get('aws_endpoint_theme_classifier');

    $client = new ComprehendClient([
      'region' => $region,
      'version' => 'latest',
      'credentials' => [
        'key' => $access_key,
        'secret' => $secret_key,
      ],
    ]);

    $result = $client->classifyDocument([
      'EndpointArn' => $endpoint,
      'Text' => $body,
    ]);

    $text = '';
    $parts = [];
    foreach ($result->get('Classes') as $class) {
      $parts[] = $class['Name'] . ' (' . round(100 * $class['Score'], 1) . '%)';
    }
    $text = implode(', ', $parts);

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#aws-comprehend-suggest-response', $text));
    return $response;
  }
}

/**
 * Use AWS Claude.
 */
function reliefweb_openai_content_node_suggest_aws_claude(array &$form, FormStateInterface $form_state) {
  $body = $form_state->getValue('body')[0]['value'];

  if (!empty($body)) {
    $body = strip_tags(trim($body));
    $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
    $body = preg_replace("/  +/", ' ', $body);
    $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

    $config = \Drupal::config('reliefweb_openai.settings');

    $access_key = $config->get('aws_access_key');
    $secret_key = $config->get('aws_secret_key');
    $region = $config->get('aws_region');
    $endpoint = $config->get('aws_endpoint_theme_classifier');

    $client = new BedrockRuntimeClient([
      'region' => $region,
      'version' => 'latest',
      'credentials' => [
        'key' => $access_key,
        'secret' => $secret_key,
      ],
    ]);

    $prompt = 'Extract the humanitarian theme (One of Agriculture, Camp Coordination and Camp Management, Climate Change and Environment, Contributions, Coordination, Disaster Management, Education, Food and Nutrition, Gender, Health, HIV/AIDS, Humanitarian Financing, Logistics and Telecommunications, Mine Action, Peacekeeping and Peacebuilding, Protection and Human Rights, Recovery and Reconstruction, Safety and Security, Shelter and Non-Food Items, Water Sanitation Hygiene) and country from the text below.' . "\n\n" . $body;
    if (isset($form['field_job_experience'])) {
      $prompt = 'Extract the required years of job experience, career category, humanitarian theme (One of Agriculture, Camp Coordination and Camp Management, Climate Change and Environment, Contributions, Coordination, Disaster Management, Education, Food and Nutrition, Gender, Health, HIV/AIDS, Humanitarian Financing, Logistics and Telecommunications, Mine Action, Peacekeeping and Peacebuilding, Protection and Human Rights, Recovery and Reconstruction, Safety and Security, Shelter and Non-Food Items, Water Sanitation Hygiene) and country from the text below.' . "\n\n" . $body;
    }

    $text = "\n\nHuman: $prompt\n\nAssistant:";

    $result = $client->invokeModel([
      'EndpointArn' => $endpoint,
      'Text' => $text,
    ]);

    $text = '';
    $parts = [];
    foreach ($result->get('Classes') as $class) {
      $parts[] = $class['Name'] . ' (' . round(100 * $class['Score'], 1) . '%)';
    }
    $text = implode(', ', $parts);

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#aws-claude-suggest-response', $text));
    return $response;
  }
}

/**
 * Make chat call.
 */
function reliefweb_openai_http_call_azure($query) {
  $config = \Drupal::config('reliefweb_openai.settings');
  $endpoint = $config->get('azure_endpoint');
  $key = $config->get('azure_apikey');

  $http_client = \Drupal::httpClient();

  $headers = [
    'Content-Type' => 'application/json',
    'API-KEY' => $key,
  ];

  $response = $http_client->request(
    'POST',
    $endpoint,
    [
      'headers' => $headers,
      'json' => $query,
    ],
  );

  $body = $response->getBody() . '';
  return json_decode($body, TRUE);
}
