<?php

/**
 * @file
 * Contains hook implementations for this module.
 */

use Aws\BedrockRuntime\BedrockRuntimeClient;
use Aws\Comprehend\ComprehendClient;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter().
 */
function reliefweb_openai_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (preg_match('/node_(add|.*_edit)_form/', $form_id)) {
    $entity_types = [
      'node' => [
        'report',
        'job',
      ],
    ];
    $entity = $form_state->getFormObject()->getEntity();

    if (!empty($entity_types) && array_key_exists($entity->getEntityTypeId(), $entity_types)) {
      if (in_array($entity->bundle(), $entity_types[$entity->getEntityTypeId()])) {
        $form['chatgpt_suggest'] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#access' => FALSE,
          '#title' => t('Suggest humanitarian themes using ChatGPT'),
        ];

        $form['chatgpt_suggest']['chatgpt_response'] = [
          '#type' => 'markup',
          '#markup' => t('chatgpt can attempt to suggest possible humanitarian themes to use.'),
          '#prefix' => '<div id="chatgpt-suggest-response">',
          '#suffix' => '</div>',
        ];

        $form['chatgpt_suggest']['do_suggest'] = [
          '#type' => 'button',
          '#value' => t('Suggest humanitarian theme(s) - ChatGPT'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'reliefweb_openai_content_node_suggest_chatgpt',
            'wrapper' => 'chatgpt-suggest-response',
          ],
        ];

        $form['aws_comprehend'] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#title' => t('Suggest humanitarian themes using AWS Comprehend'),
        ];

        $form['aws_comprehend']['aws_response'] = [
          '#type' => 'markup',
          '#markup' => t('AWS Comprehend can attempt to suggest possible classification terms to use as taxonomy.'),
          '#prefix' => '<div id="aws-comprehend-suggest-response">',
          '#suffix' => '</div>',
        ];

        $form['aws_comprehend']['aws_do_suggest'] = [
          '#type' => 'button',
          '#value' => t('Suggest humanitarian theme(s) - AWS Comprehend'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'reliefweb_openai_content_node_suggest_aws',
            'wrapper' => 'aws-comprehend-suggest-response',
          ],
        ];

        $form['aws_claude'] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#title' => t('Suggest humanitarian themes using Claude'),
        ];

        $form['aws_claude']['aws_response'] = [
          '#type' => 'markup',
          '#markup' => t('Claude can attempt to suggest possible classification terms to use as taxonomy.'),
          '#prefix' => '<div id="aws-claude-suggest-response">',
          '#suffix' => '</div>',
        ];

        $form['aws_claude']['aws_do_suggest'] = [
          '#type' => 'button',
          '#value' => t('Suggest humanitarian theme(s) - Claude'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'reliefweb_openai_content_node_suggest_aws_claude',
            'wrapper' => 'aws-claude-suggest-response',
          ],
        ];

        $form['azure'] = [
          '#type' => 'details',
          '#open' => TRUE,
          '#title' => t('Suggest humanitarian themes using Azure'),
        ];

        $form['azure']['azure_response'] = [
          '#type' => 'markup',
          '#markup' => t('Azure can attempt to suggest possible classification terms to use as taxonomy.'),
          '#prefix' => '<div id="azure-suggest-response">',
          '#suffix' => '</div>',
        ];

        $form['azure']['azure_do_suggest'] = [
          '#type' => 'button',
          '#value' => t('Suggest humanitarian theme(s) - Azure'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'reliefweb_openai_content_node_suggest_azure',
            'wrapper' => 'azure-suggest-response',
          ],
        ];
      }
    }
  }
}

/**
 * The AJAX callback for suggesting taxonomy.
 *
 * @param array $form
 *   The node form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The HTML response.
 */
function reliefweb_openai_content_node_suggest_chatgpt(array &$form, FormStateInterface $form_state) {
  $body = $form_state->getValue('body')[0]['value'];

  if (!empty($body)) {
    $body = Unicode::truncate(strip_tags(trim($body)), 3900, TRUE);
    $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
    $body = preg_replace("/  +/", ' ', $body);
    $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

    $prompt = reliefweb_openai_get_prompt(FALSE) . $body;

    if (isset($form['field_job_experience'])) {
      $prompt = reliefweb_openai_get_prompt() . $body;
    }

    $result = reliefweb_openai_http_call_chat(
      [
        'model' => 'gpt-3.5-turbo-16k',
        'messages' => [
          [
            'role' => 'user',
            'content' => $prompt,
          ],
        ],
        'temperature' => .8,
        'max_tokens' => 14500,
      ],
    );

    $text = $result['choices'][0]['message']['content'] ?? 'undecided';
    $text = str_replace("\n", '<br>', $text);

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#chatgpt-suggest-response', $text));
    return $response;
  }
}

/**
 * The AJAX callback for suggesting taxonomy.
 *
 * @param array $form
 *   The node form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The HTML response.
 */
function reliefweb_openai_content_node_suggest_azure(array &$form, FormStateInterface $form_state) {
  $body = $form_state->getValue('body')[0]['value'];

  if (!empty($body)) {
    $body = Unicode::truncate(strip_tags(trim($body)), 9999, TRUE);
    $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
    $body = preg_replace("/  +/", ' ', $body);
    $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

    $prompt = reliefweb_openai_get_prompt(FALSE) . $body;

    if (isset($form['field_job_experience'])) {
      $prompt = reliefweb_openai_get_prompt() . $body;
    }

    $result = reliefweb_openai_http_call_azure(
      [
        'messages' => [
          [
            'role' => 'system',
            'content' => 'You are an AI assistant that helps people find information.',
          ],
          [
            'role' => 'user',
            'content' => $prompt,
          ],
        ],
      ],
    );

    $text = $result['choices'][0]['message']['content'] ?? 'undecided';
    $text = str_replace("\n", '<br>', $text);

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#azure-suggest-response', $text));
    return $response;
  }
}

/**
 * Make the call.
 */
function reliefweb_openai_http_call($query) {
  $config = \Drupal::config('reliefweb_openai.settings');

  $http_client = \Drupal::httpClient();
  $url = 'https://api.openai.com/v1/completions';

  $headers = [
    'Content-Type' => 'application/json',
    'Authorization' => 'Bearer ' . $config->get('token'),
  ];

  $response = $http_client->request(
    'POST',
    $url,
    [
      'headers' => $headers,
      'json' => $query,
    ],
  );

  $body = $response->getBody() . '';
  return json_decode($body, TRUE);
}

/**
 * Make chat call.
 */
function reliefweb_openai_http_call_chat($query) {
  $config = \Drupal::config('reliefweb_openai.settings');

  $http_client = \Drupal::httpClient();
  $url = 'https://api.openai.com/v1/chat/completions';

  $headers = [
    'Content-Type' => 'application/json',
    'Authorization' => 'Bearer ' . $config->get('token'),
  ];

  $response = $http_client->request(
    'POST',
    $url,
    [
      'headers' => $headers,
      'json' => $query,
    ],
  );

  $body = $response->getBody() . '';
  return json_decode($body, TRUE);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Check if job is a tender or not.
 */
function reliefweb_openai_node_update(EntityInterface $entity) {
  if (!$entity->bundle() == 'job') {
    return;
  }

  if ($entity->getModerationStatus() != 'pending') {
    return;
  }

  if (!$entity->original) {
    return;
  }

  if ($entity->getModerationStatus() == $entity->original->getModerationStatus()) {
    return;
  }

  $body = $entity->body->value;

  if (empty($body)) {
    return;
  }

  $body = Unicode::truncate(strip_tags(trim($body)), 8000, TRUE);
  $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
  $body = preg_replace("/  +/", ' ', $body);
  $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

  $result = reliefweb_openai_http_call_chat(
    [
      'model' => 'gpt-3.5-turbo-16k',
      'messages' => [
        [
          'role' => 'user',
          'content' => 'Is the following job opening a tender or not, respond with yes or no:\n\n"' . $body . '"',
        ],
      ],
      'temperature' => 1,
      'max_tokens' => 14500,
    ],
  );

  $answer = $result['choices'][0]['message']['content'] ?? 'undecided';

  switch (strtolower($answer)) {
    case 'yes':
    case 'yes.':
      $text = 'It looks like this is a tender.';
      break;

    case 'no':
    case 'no.':
      $text = 'It looks like this is NOT a tender.';
      break;

    default:
      $text = 'Not sure if this is a tender or not.';
      break;

  }

  // Reload node and set message as admin.
  $entity = Node::load($entity->id());
  $entity->setNewRevision();
  $entity->setRevisionLogMessage($text);
  $entity->setRevisionUserId(1);
  $entity->save();
}

/**
 * Use AWS Comprehend.
 */
function reliefweb_openai_content_node_suggest_aws(array &$form, FormStateInterface $form_state) {
  $body = $form_state->getValue('body')[0]['value'];

  if (!empty($body)) {
    $body = Unicode::truncate(strip_tags(trim($body)), 3900, TRUE);
    $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
    $body = preg_replace("/  +/", ' ', $body);
    $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

    $config = \Drupal::config('reliefweb_openai.settings');

    $access_key = $config->get('aws_access_key');
    $secret_key = $config->get('aws_secret_key');
    $region = $config->get('aws_region');
    $endpoint = $config->get('aws_endpoint_theme_classifier');

    $client = new ComprehendClient([
      'region' => $region,
      'version' => 'latest',
      'credentials' => [
        'key' => $access_key,
        'secret' => $secret_key,
      ],
    ]);

    $result = $client->classifyDocument([
      'EndpointArn' => $endpoint,
      'Text' => $body,
    ]);

    $text = '';
    $parts = [];
    foreach ($result->get('Classes') as $class) {
      $parts[] = $class['Name'] . ' (' . round(100 * $class['Score'], 1) . '%)';
    }
    $text = implode(', ', $parts);

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#aws-comprehend-suggest-response', $text));
    return $response;
  }
}

/**
 * Use AWS Claude.
 */
function reliefweb_openai_content_node_suggest_aws_claude(array &$form, FormStateInterface $form_state) {
  $body = $form_state->getValue('body')[0]['value'];

  if (!empty($body)) {
    $body = strip_tags(trim($body));
    $body = str_replace(["\r\n", "\r", "\n", "\\r", "\\n", "\\r\\n"], "", $body);
    $body = preg_replace("/  +/", ' ', $body);
    $body = preg_replace("/[^a-z0-9 ]/i", '', $body);

    $config = \Drupal::config('reliefweb_openai.settings');

    $access_key = $config->get('aws_access_key');
    $secret_key = $config->get('aws_secret_key');

    $client = new BedrockRuntimeClient([
      'region' => 'us-east-1',
      'version' => 'latest',
      'credentials' => [
        'key' => $access_key,
        'secret' => $secret_key,
      ],
    ]);

    $prompt = reliefweb_openai_get_prompt(FALSE) . $body;
    if (isset($form['field_job_experience'])) {
      $prompt = reliefweb_openai_get_prompt() . $body;
    }

    $text = [
      'prompt' => "\n\nHuman: $prompt\n\nAssistant:",
      'max_tokens_to_sample' => 4000,
      'temperature' => 0.1,
      'top_p' => 0.9,
    ];

    $result = $client->invokeModel([
      'modelId' => 'anthropic.claude-instant-v1',
      'body' => json_encode($text),
    ]);

    $text = $result->get('body') . '';
    $text = json_decode($text, TRUE);
    $text = $text['completion'];
    $text = str_replace("\n", '<br>', $text);

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#aws-claude-suggest-response', $text));
    return $response;
  }
}

/**
 * Make chat call.
 */
function reliefweb_openai_http_call_azure($query) {
  $config = \Drupal::config('reliefweb_openai.settings');
  $endpoint = $config->get('azure_endpoint');
  $key = $config->get('azure_apikey');

  $http_client = \Drupal::httpClient();

  $headers = [
    'Content-Type' => 'application/json',
    'API-KEY' => $key,
  ];

  $response = $http_client->request(
    'POST',
    $endpoint,
    [
      'headers' => $headers,
      'json' => $query,
    ],
  );

  $body = $response->getBody() . '';
  return json_decode($body, TRUE);
}

/**
 * Get prompt.
 */
function reliefweb_openai_get_prompt($job = TRUE) {
  if (!$job) {
    return 'Extract the humanitarian theme (One of Agriculture, Camp Coordination and Camp Management, Climate Change and Environment, Contributions, Coordination, Disaster Management, Education, Food and Nutrition, Gender, Health, HIV/AIDS, Humanitarian Financing, Logistics and Telecommunications, Mine Action, Peacekeeping and Peacebuilding, Protection and Human Rights, Recovery and Reconstruction, Safety and Security, Shelter and Non-Food Items, Water Sanitation Hygiene) and country from the text below and explain why you have chosen a particular humanitarian theme.' . "\n\n";
  }

  $lines = [
    "Extract the required years of job experience, career category, country and up to 3 relevant humanitarian themes (as defined below) from the job description below and explain why you have chosen a particular humanitarian theme.",
    "",
    "To aid you in selecting a humanitarian theme, you can use this list with the theme and a short explanation:",
    "- Agriculture: Agriculture includes fisheries; animal husbandry; and distribution of inputs such as seeds; aid activities helping to improve food security, agricultural and veterinary training.",
    "- Camp Coordination and Camp Management: Camp Management and Camp Coordination includes ensuring equitable access to services and protection for displaced persons living in communal settings, to improve their quality of life and dignity during displacement, and advocate for solutions while preparing them for life after displacement.",
    "- Climate Change and Environment: Climate Change and Environment includes humanitarian implications of climate change and/or environmental changes, such as increased vulnerability, migration or displacement.",
    "- Contributions: Contributions is defined as financial and in-kind humanitarian aid, as announced by the recipient (government, multilateral agencies, and NGOs), by donors (government, multilateral funding institutions, and pooled funds), or in media reporting.",
    "- Coordination: Coordination includes intra- and inter-cluster coordination, civil-military coordination, private sector partnership.",
    "- Disaster Management: Disaster Management includes policy and operational activities pertaining to the various stages of natural disasters at all levels, including early warning, disaster preparedness, prevention, risk reduction and mitigation.",
    "- Education: Education includes establishment of temporary learning spaces, provision of school supplies, and support to teachers and other school personnel, governmental entities. Post-conflict/disaster normalization support, including rehabilitation of schooling infrastructure.",
    "- Food and Nutrition: Food and Nutrition includes food security, food aid, school feeding, supplementary feeding, and therapeutic feeding.",
    "- Gender: Gender covers victims of emergencies or disasters and beneficiaries of humanitarian action irrespective of sex, focusing on issues affecting the genders differently. Also includes women as peacemakers and agents of change.",
    "- Health: Health includes emergency medical services, equipment and supplies; reproductive health; psycho-social support; mobile medical clinics; and disease control and surveillance.",
    "- HIV/AIDS: HIV/AIDS includes delivery of HIV/AIDS services in emergencies and humanitarian consequences of prolonged high prevalence.",
    "- Humanitarian Financing: Humanitarian Financing includes good humanitarian donorship and related policy framework and coordinated funding mechanisms such as pooled funds (Central Emergency Response Fund (CERF), Common Humanitarian Fund (CHF), Emergency Response Fund (ERF)). Accountability and transparency. Partnership.",
    "- Logistics and Telecommunications: Logistics and Telecommunications is defined as operational activities concerned with the supply, handling, storage and transportation of aid material and aid worker, and provision of ICT services and support to aid personnel serving in emergencies.",
    "- Mine Action: Mine Actions addresses problems of landmines, unexploded ordinances (UXO) and explosive remnants of war (ERW), including clearance, education, victim assistance and advocacy. (Sour: UN Mine Action Gateway)",
    "- Peacekeeping and Peacebuilding: Peacekeeping and Peacebuilding pertains to policies, programs, and associated efforts : resolve conflict; prevent conflict escalation; uphold law and order in a conflict zone; and restore social and political institutions disrupted by the conflict; such as ceasefire/peace negotiation; disarmament/demobilisation/reintegration; multilateral peacekeeping and political missions; and electoral support/observation missions.",
    "- Protection and Human Rights: Protection and Human Rights pertains to civilians, IDPs and refugees in the context of human rights violations, gender-based violence, international humanitarian, criminal and human rights law, including humanitarian access.",
    "- Recovery and Reconstruction: Recovery and Reconstruction includes replacement/restoration of assets, infrastructure and livelihoods lost, damaged or interrupted in natural disasters or conflict. The theme also covers Early Recovery which encompass specific interventions to help people move from dependence on humanitarian relief towards sustainable development.",
    "- Safety and Security: Safety and Security is defined as policies, measures and incidents relating to safety and security of humanitarian aid workers in the field. Safety and security of civilians is covered under “Protection and Human Rights.”",
    "- Shelter and Non-Food Items: Shelter and Non-Food Items includes provision of shelter materials and non-food household item packages. The theme also covers Camp Coordination and Camp Management. Long-term/permanent reconstruction/rebuilding of housing is covered under \"Recovery and Reconstruction.\"",
    "- Water Sanitation Hygiene: Water Sanitation Hygiene includes emergency provision of safe drinking water, hygiene and sanitation services, environmental sanitation and water supply, as well as hygiene promotion campaigns.",
    "",
    "Job description:",
    "",
    "",
  ];

  return implode("\n", $lines);
}
