<?php

/**
 * @file
 * Contains guidelines.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\guidelines\Entity\Guideline;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\guidelines\Entity\GuidelineType;

/**
 * Implements hook_help().
 */
function guidelines_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the guidelines module.
    case 'help.page.guidelines':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Add guidelines to entities and fields') . '</p>';
      return $output;

    default:
  }
}

/*
- old id from trello
- grouping
  - terms
  - book
- moderation
- use nodes
*/

/**
 * Implements hook_theme().
 */
function guidelines_theme() {
  $theme = [];
  $theme['guideline'] = [
    'render element' => 'elements',
    'file' => 'guideline.page.inc',
    'template' => 'guideline',
  ];
  $theme['guideline_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'guideline.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function guidelines_theme_suggestions_guideline(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#guideline'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'guideline__' . $sanitized_view_mode;
  $suggestions[] = 'guideline__' . $entity->bundle();
  $suggestions[] = 'guideline__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'guideline__' . $entity->id();
  $suggestions[] = 'guideline__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function guidelines_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  guidelines_attach_to_widget($element, $form_state, $context);
}

/**
 * Attach guideline to a widget.
 */
function guidelines_attach_to_widget(&$element, FormStateInterface &$form_state, $context) {
  static $descriptions = [];

  $bundle = '';
  $form_object = $form_state->getFormObject();
  $entity_type = $form_object->getEntity()->getEntityType()->id();
  if ($form_object instanceof ContentEntityForm) {
    $bundle = $form_object->getEntity()->bundle();
  }
  $field_name = $context['items']->getName();

  if (!isset($descriptions[$entity_type])) {
    /** @var Drupal\guidelines\Entity\Guideline[] $description_entities */
    $guidelines = Guideline::loadByEntity($entity_type);
    foreach ($guidelines as $guideline) {
      foreach ($guideline->field_field as $field) {
        $descriptions[$entity_type][$field->value] = $guideline;
      }
    }
  }

  $key = $entity_type . '.' . $bundle . '.' . $field_name;
  if (isset($descriptions[$entity_type][$key])) {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('guideline');
    $pre_render = $view_builder->view($descriptions[$entity_type][$key], 'default');
    $render_output = render($pre_render);

    if (isset($element['#description'])) {
      $element['#description'] = $render_output;
    }

    if (isset($element['value']['#description'])) {
      $element['value']['#description'] = $render_output;
    }
  }
}

/**
 * Migrate datas from Trello.
 */
function reliefweb_guidelines_migrate() {
  $config = \Drupal::config('reliefweb_trello.settings');
  $key = $config->get('key');
  $token = $config->get('token');

  $trello = new \Drupal\guidelines\GuidelinesFromTrello($key, $token, \Drupal::service('config.factory'), \Drupal::service('http_client'), \Drupal::service('logger.factory'));

  $lists = $trello->getLists('554c519c9b98caa2495ea5db');
  foreach ($lists as $weight_list => $list) {
    // Create guideline.
    $values = [
      'type' => 'guideline_list',
      'name' => $list['name'],
      'parent' => [],
      'weight' => $weight_list,
      'field_title' => $list['name'],
    ];

    $guideline_list = Guideline::create($values);
    $guideline_list->save();

    // Get cards.
    $cards = $trello->getCards($list['id']);
    foreach ($cards as $weight_card => $card) {
      // Create guideline, check labels.
      $values = [
        'type' => 'field_guideline',
        'name' => $card['name'],
        'parent' => [],
        'weight' => $weight_card,
        'field_title' => $card['name'],
        'field_short_link' => $card['shortLink'],
        'field_description' => [
          // @todo extract images.
          'value' => $card['desc'],
          'format' => 'guideline',
        ],
      ];

      // Check labels.
      $list_name = $guideline_list->label();
      if (strpos($list_name, 'Posting step-by-step') !== FALSE) {
        foreach ($card['labels'] as $label) {
          if (strpos($label['name'], 'form-') === 0) {
            $bundle = strtolower(explode(' - ', $list_name)[0]);
            $base_field_name = str_replace('-', '_', substr($label['name'], 5));

            // Fix bundle machine names.
            switch ($bundle) {
              case 'jobs':
                $bundle = 'job';
                break;

              case 'reports':
                $bundle = 'report';
                break;

              case 'topics':
                $bundle = 'topic';
                break;

            }

            // Title is a base field, so no config.
            if ($base_field_name === 'title') {
              $key = 'node.' . $bundle . '.' . $base_field_name;
              $values['field_field'] = $values['field_field'] ?? [];
              $values['field_field'][] = [
                'value' => $key,
              ];
            }
            else {
              $found = FALSE;
              $field_names = guidelines_get_possible_field_names($bundle, $base_field_name);
              foreach ($field_names as $field_name) {
                if (FieldStorageConfig::loadByName('node', $field_name)) {
                  $found = TRUE;
                  $key = 'node.' . $bundle . '.' . $field_name;
                  $values['field_field'] = $values['field_field'] ?? [];
                  $values['field_field'][] = [
                    'value' => $key,
                  ];
                }
              }

              // Log fields not found.
              if (!$found) {
                \Drupal::logger('guilines_trello')->notice($base_field_name . ' NOT FOUND');
              }
            }
          }
        }
      }

      $guideline = Guideline::create($values);
      $guideline->setParents([$guideline_list]);
      $guideline->save();

      // Get attachments.
      if ($card['badges']['attachments'] > 0) {
        $attachments = $trello->getCardAttachments($card['id']);
        foreach($attachments as $attachment) {
          // @todo Add external links, skip images.
        }
      }
    }
  }
}

/**
 * Get possible field names.
 */
function guidelines_get_possible_field_names($bundle, $field_name) {
  $candidates = [
    $field_name,
    'field_' . $field_name,
    'field_' . $bundle . '_' . $field_name,
  ];

  switch ($field_name) {
    case 'job_description':
      $candidates[] = 'body';
      break;

    case 'job_years_of_experience':
      $candidates[] = 'field_job_experience';
      break;

    case 'location':
      $candidates[] = 'field_country';
      break;

  }

  return $candidates;
}

/**
 * Delete all guidelines.
 */
function _reliefweb_guidelines_delete_all() {
  $guidelines = Guideline::loadMultiple();
  foreach ($guidelines as $guideline) {
    $guideline->delete();
  }

  $guideline_types = GuidelineType::loadMultiple();
  foreach ($guideline_types as $guideline_type) {
    $guideline_type->delete();
  }

}
