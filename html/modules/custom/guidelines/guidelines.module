<?php

/**
 * @file
 * Contains guidelines.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\guidelines\Entity\Guideline;

/**
 * Implements hook_help().
 */
function guidelines_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the guidelines module.
    case 'help.page.guidelines':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Add guidelines to entities and fields') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function guidelines_theme() {
  $theme = [];
  $theme['guideline'] = [
    'render element' => 'elements',
    'file' => 'guideline.page.inc',
    'template' => 'guideline',
  ];
  $theme['guideline_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'guideline.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function guidelines_theme_suggestions_guideline(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#guideline'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'guideline__' . $sanitized_view_mode;
  $suggestions[] = 'guideline__' . $entity->bundle();
  $suggestions[] = 'guideline__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'guideline__' . $entity->id();
  $suggestions[] = 'guideline__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_form_HOOK_alter().
 */
function guidelines_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  $bundle = '';
  $form_object = $form_state->getFormObject();
  $entity_type = $form_object->getEntity()->getEntityType()->id();
  if ($form_object instanceof ContentEntityForm) {
    $bundle = $form_object->getEntity()->bundle();
  }

  $form['#attributes']['data-guidelines-entity-type'] = $entity_type;
  $form['#attributes']['data-guidelines-entity-bundle'] = $bundle;
  $form['#attached']['library'][] = 'guidelines/guidelines-json';
}

/**
 * Implements hook_field_widget_form_alter().
 */
function guidelines_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  // @todo add setting.
  $display_inline = FALSE;
  if ($display_inline) {
    guidelines_attach_to_widget($element, $form_state, $context);
  }
}

/**
 * Attach guideline to a widget.
 */
function guidelines_attach_to_widget(&$element, FormStateInterface &$form_state, $context) {
  static $descriptions = [];

  $bundle = '';
  $form_object = $form_state->getFormObject();
  $entity_type = $form_object->getEntity()->getEntityType()->id();
  if ($form_object instanceof ContentEntityForm) {
    $bundle = $form_object->getEntity()->bundle();
  }
  $field_name = $context['items']->getName();

  if (!isset($descriptions[$entity_type])) {
    /** @var Drupal\guidelines\Entity\Guideline[] $description_entities */
    $guidelines = Guideline::loadByEntity($entity_type);
    foreach ($guidelines as $guideline) {
      foreach ($guideline->field_field as $field) {
        $descriptions[$entity_type][$field->value] = $guideline;
      }
    }
  }

  $key = $entity_type . '.' . $bundle . '.' . $field_name;
  if (isset($descriptions[$entity_type][$key])) {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('guideline');
    $pre_render = $view_builder->view($descriptions[$entity_type][$key], 'default');
    $render_output = render($pre_render);

    if (isset($element['#description'])) {
      $element['#description'] = $render_output;
    }

    if (isset($element['value']['#description'])) {
      $element['value']['#description'] = $render_output;
    }
  }
}
