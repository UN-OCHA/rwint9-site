<?php

/**
 * @file
 * ReliefWeb Files module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;
use Drupal\reliefweb_files\Plugin\Field\FieldType\ReliefWebFileList;

/**
 * Implements hook_theme().
 */
function reliefweb_files_theme() {
  return [
    // Theme for a file list form widget.
    'reliefweb_file_widget' => [
      'render element' => 'element',
    ],
    // Theme for a file item form widget.
    'reliefweb_file_widget_item' => [
      'render element' => 'element',
    ],
    // Theme for a file list form widget.
    'reliefweb_file_widget__simplified' => [
      'render element' => 'element',
    ],
    // Theme for a file item form widget.
    'reliefweb_file_widget_item__simplified' => [
      'render element' => 'element',
    ],
    // Theme for a list of files.
    'reliefweb_file_list' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => t('Attachments'),
        // Section title attributes.
        'title_attributes' => NULL,
        // List of files. Each item has the following properties:
        // - item: field item
        // - url: link to the file
        // - name: file name
        // - label: file name or 'Download' etc.
        // - description: file description (extension, size, language etc.)
        'list' => [],
        // List attributes.
        'list_attributes' => NULL,
        // Section footer.
        'footer' => NULL,
        // Section footer attributes.
        'footer_attributes' => NULL,
        // Flag to indicate if the first attachment's preview should be lazy
        // loaded or not.
        'lazy_load_first_preview' => TRUE,
      ],
    ],
  ];
}

/**
 * Implemenents hook_preprocess_HOOK() for "responsive_image".
 */
function reliefweb_files_preprocess_responsive_image__preview(&$variables) {
  // We add a parameter to the image derivative URLs to ensure the correct
  // version is served.
  if (isset($variables['attributes']['data-version'])) {
    $version = $variables['attributes']['data-version'];
    if (isset($variables['sources'])) {
      foreach ($variables['sources'] as $source) {
        if ($source instanceof Attribute && $source->offsetExists('srcset')) {
          $srcset = (string) $source->offsetGet('srcset');
          $srcset = preg_replace_callback('#(?<uri>(https?://[^/]+)?/[^ ,]+)#', function ($matches) use ($version) {
            return $matches['uri'] . (strpos($matches['uri'], '?') !== FALSE ? '&' : '?') . $version;
          }, $srcset);
          $source->offsetSet('srcset', $srcset);
        }
      }
    }
    unset($variables['attributes']['data-version']);
  }

  if (isset($variables['img_element']['#attributes']['data-version'])) {
    $version = $variables['img_element']['#attributes']['data-version'];
    $uri = $variables['img_element']['#uri'];
    $uri .= (strpos($uri, '?') !== FALSE ? '&' : '?') . $version;
    $variables['img_element']['#uri'] = $uri;
    unset($variables['img_element']['#attributes']['data-version']);
  }
}

/**
 * Get the list of languages supported by ReliefWeb.
 *
 * @return array
 *   List of languages keyed by their ISO 639-1 code.
 */
function reliefweb_files_get_languages() {
  static $languages;

  if (!isset($languages)) {
    $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
    $bundle_key = $storage->getEntityType()->getkey('bundle');
    $entities = $storage->loadByProperties([$bundle_key => 'language']);

    $languages = [];
    foreach ($entities as $entity) {
      $code = $entity->field_language_code->value;
      if (!empty($code)) {
        $languages[$code] = $entity->label();
      }
    }
  }

  return $languages;
}

/**
 * Implements hook_reliefweb_utility_file_update_alter().
 */
function reliefweb_files_reliefweb_utility_file_update_alter(File $file, &$apply) {
  $uri = $file->getFileUri();
  if (empty($uri)) {
    $apply = FALSE;
    return;
  }

  $settings = \Drupal::config('reliefweb_files.settings');

  // Get the attachment and preview directories.
  $file_directory = $settings->get('file_directory') ?? 'attachments';
  $preview_directory = $settings->get('preview_directory') ?? 'previews';
  $directories = [preg_quote($file_directory), preg_quote($preview_directory)];

  // Pattern for the preview files.
  $pattern = '#^(?:private|public)://(?:' .
             implode('|', $directories) .
             ')/([a-z0-9]{2})/([a-z0-9]{2})/\1\2[a-z0-9-]{32}\.#';

  // Do not apply the file URI transformation for files managed by this module.
  $apply = $apply && preg_match($pattern, $uri) !== 1;
}

/**
 * Implements hook_entity_revision_delete().
 */
function reliefweb_files_entity_revision_delete(EntityInterface $entity) {
  // Drupal doesn't invoke any postRevisionDelete on the field items so this is
  // the only way to perform post revision deletion tasks.
  //
  // Check if the entity has any reliefweb_file field, in which case we
  // invoke ::updateRemoteDocumentFileReferences() to update remote file
  // references in the remote document resource associated with the entity.
  foreach ($entity as $field) {
    if ($field instanceof ReliefWebFileList) {
      $field->updateRemoteDocumentFileReferences();
      // No need to continue as calling the above method on one of the
      // reliefweb_file field of the entity is enough to update the remote
      // file references.
      break;
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function reliefweb_files_entity_insert(EntityInterface $entity) {
  // Handle file entity fingerprint indexing.
  if ($entity->getEntityTypeId() === 'file') {
    $file_duplication = \Drupal::service('reliefweb_files.file_duplication');
    $file_duplication->indexFileFingerprint($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function reliefweb_files_entity_update(EntityInterface $entity) {
  // Handle file entity fingerprint indexing.
  if ($entity->getEntityTypeId() === 'file') {
    $file_duplication = \Drupal::service('reliefweb_files.file_duplication');
    $file_duplication->indexFileFingerprint($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function reliefweb_files_entity_delete(EntityInterface $entity) {
  // Handle file entity fingerprint deletion.
  if ($entity->getEntityTypeId() === 'file') {
    $file_duplication = \Drupal::service('reliefweb_files.file_duplication');
    $file_duplication->deleteFileFingerprint($entity);
  }
}
