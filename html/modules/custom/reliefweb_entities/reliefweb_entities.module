<?php

/**
 * @file
 * Entity management for ReliefWeb.
 */

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\reliefweb_entities\EntityFormAlterServiceBase;
use Drupal\reliefweb_utility\Helpers\TaxonomyHelper;
use Drupal\reliefweb_utility\Helpers\TextHelper;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_entity_bundle_info_alter().
 *
 * Add bundle classes to nodes and terms to handle business logic.
 */
function reliefweb_entities_entity_bundle_info_alter(&$bundles) {
  $bundles['node']['announcement']['class'] = 'Drupal\reliefweb_entities\Entity\Announcement';
  $bundles['node']['announcement']['label'] = 'Announcement';

  $bundles['node']['blog_post']['class'] = 'Drupal\reliefweb_entities\Entity\BlogPost';
  $bundles['node']['blog_post']['label'] = 'Blog Post';

  $bundles['node']['book']['class'] = 'Drupal\reliefweb_entities\Entity\Book';
  $bundles['node']['book']['label'] = 'Book Page';

  $bundles['node']['job']['class'] = 'Drupal\reliefweb_entities\Entity\Job';
  $bundles['node']['job']['label'] = 'Job';

  $bundles['node']['report']['class'] = 'Drupal\reliefweb_entities\Entity\Report';
  $bundles['node']['report']['label'] = 'Report';

  $bundles['node']['topic']['class'] = 'Drupal\reliefweb_entities\Entity\Topic';
  $bundles['node']['topic']['label'] = 'Topic';

  $bundles['node']['training']['class'] = 'Drupal\reliefweb_entities\Entity\Training';
  $bundles['node']['training']['label'] = 'Training';

  $bundles['node']['topic']['class'] = 'Drupal\reliefweb_entities\Entity\Topic';
  $bundles['node']['topic']['label'] = 'Topic';

  $bundles['taxonomy_term']['country']['class'] = 'Drupal\reliefweb_entities\Entity\Country';
  $bundles['taxonomy_term']['country']['label'] = 'Country';

  $bundles['taxonomy_term']['disaster']['class'] = 'Drupal\reliefweb_entities\Entity\Disaster';
  $bundles['taxonomy_term']['disaster']['label'] = 'Disaster';

  $bundles['taxonomy_term']['source']['class'] = 'Drupal\reliefweb_entities\Entity\Source';
  $bundles['taxonomy_term']['source']['label'] = 'Country';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add suggestions for the view mode of the taxonomy terms.
 */
function reliefweb_entities_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];

  if (!empty($variables['elements']['#view_mode'])) {
    $view_mode = $variables['elements']['#view_mode'];
    $suggestions[] = 'taxonomy_term__' . $view_mode;
    $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $view_mode;
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function reliefweb_entities_entity_bundle_field_info_alter(
  array &$fields,
  EntityTypeInterface $entity_type,
  $bundle
) {
  if (
    $entity_type->id() === 'node' &&
    $bundle === 'job' &&
    isset($fields['field_job_closing_date'])
  ) {
    $fields['field_job_closing_date']->addConstraint('FutureDateWhenPublished', []);
  }
}

/**
 * Implements hook_theme().
 */
function reliefweb_entities_theme() {
  return [
    'reliefweb_entities_sectioned_content' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section attributes.
        'attributes' => NULL,
        // This is the table of content which is a render array using the
        // reliefweb_entities_table_of_contents theme.
        'contents' => NULL,
        // This is a list of sections as render arrays.
        'sections' => NULL,
      ],
    ],
    'reliefweb_entities_table_of_contents' => [
      'variables' => [
        // Section headling level.
        'level' => 2,
        // Section id.
        'id' => 'table-of-contents',
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => t('Table of Content'),
        // Section title attributes.
        'title_attributes' => NULL,
        // List of sections grouped by category. Each category has a title and
        // a list of sub-sections which are an array keyed by ids (to use for
        // anchors) and with the sub-section titles are values.
        'sections' => [],
      ],
    ],
    'reliefweb_entities_entity_country_slug' => [
      'variables' => [
        // Wrapper attributes.
        'attributes' => NULL,
        // List of countries with the a url to either the country page or the
        // river filtered by the country, a name and a shortname.
        'countries' => [],
      ],
    ],
    'reliefweb_entities_entity_meta' => [
      'variables' => [
        // Wrapper attributes.
        'attributes' => NULL,
        // Flag indicating the list of meta is the "core" meta information,
        // usually displayed in river articles or below the title on article
        // pages.
        'core' => TRUE,
        // List of meta information for an article (ex: dates, sources etc.).
        // Each meta data has the following properties: type (simple, date,
        // date-range or taglist), label, value (simple, date, array with start
        // and end date or list of tags). For tag lists, there are also count
        // and sort properties.
        'meta' => [],
      ],
    ],
    'reliefweb_entities_entity_text' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section id.
        'id' => '',
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => '',
        // Section title attributes.
        'title_attributes' => NULL,
        // The text content should be a safe HTML string.
        'content' => '',
        // Text content attributes.
        'content_attributes' => NULL,
        // Flag indicating if iframes are allowed in the rendered HTML content.
        'iframe' => TRUE,
        // List of extra attributes allowed in the rendered HTML content.
        'allowed_attributes' => [],
      ],
    ],
    'reliefweb_entities_entity_details' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section id.
        'id' => 'details',
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => t('Details'),
        // Section title attributes.
        'title_attributes' => NULL,
        // Core flag, see "reliefweb_entities_entity_meta" above.
        'core' => FALSE,
        // Meta information, see "reliefweb_entities_entity_meta" above.
        'meta' => '',
        // Meta information attributes.
        'meta_attributes' => NULL,
      ],
    ],
    'reliefweb_entities_entity_social_media_links' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section id.
        'id' => 'social-media',
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => t('Social Media'),
        // Section title attributes.
        'title_attributes' => NULL,
        // List of social media links with a url and title.
        'links' => [],
        // Flag to indicate that the links should be icons only.
        'icons_only' => FALSE,
      ],
    ],
    'reliefweb_entities_entity_useful_links' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section id.
        'id' => 'useful-links',
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => t('Useful Links'),
        // Section title attributes.
        'title_attributes' => NULL,
        // List of links.
        'links' => [],
      ],
    ],
    'reliefweb_entities_entity_source_disclaimers' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => NULL,
        // Section title attributes.
        'title_attributes' => NULL,
        // List of source disclaimers. Each item has those properties:
        // - name: source name
        // - disclaimer: source disclaimer.
        'disclaimers' => [],
      ],
    ],
    'reliefweb_entities_entity_image' => [
      'variables' => [
        // Wrapper attributes.
        'attributes' => NULL,
        // Image style.
        'style' => NULL,
        // Image information with uri, width, height, alt and copyright.
        'image' => [],
        // Flag to indicate whether to show the caption or not.
        'caption' => TRUE,
      ],
    ],
    'reliefweb_entities_book_menu' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => t('Book navigation'),
        // Section title attributes.
        'title_attributes' => NULL,
        // List of menu links with a url, title and optional "below" property
        // that contains child links.
        'links' => [],
      ],
    ],
    'reliefweb_entities_form_user_information' => [
      'variables' => [
        // Section attributes.
        'attributes' => NULL,
        // Entity information with type, url, id and creation date.
        'entity' => NULL,
        // Entity author information with name, mail and url.
        'author' => NULL,
        // Source information with author rights for the sources. Each element
        // has a URL to the source and the right information with id and label.
        'sources' => NULL,
        // Potential new source information with the name, url and right with
        // id and label.
        'new_source' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_token_info().
 *
 * Add content type token that returns "map" if the node is tagged with "Map".
 */
function reliefweb_entities_token_info() {
  $info = [];

  $info['tokens']['node']['reliefweb-content-type'] = [
    'name' => t('ReliefWeb - custom content type'),
    'description' => t('The unique machine-readable content type or map or infographic.'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 *
 * @todo add token for the country shortname to use in report/job/training urls.
 */
function reliefweb_entities_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'reliefweb-content-type':
          // Use the bundle as content type.
          $replacements[$original] = $node->bundle();
          // Use "map" as content type for maps.
          if ($node->bundle() === 'report') {
            $content_format = $node->field_content_format->entity;
            if (!empty($content_format) && $content_format->label() === 'Map') {
              $replacements[$original] = 'map';
            }
          }
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_form_HOOK_alter() for "node_form".
 */
function reliefweb_entities_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  EntityFormAlterServiceBase::alterEntityForm($form, $form_state);
}

/**
 * Implements hook_form_HOOK_alter() for "taxonomy_term_form".
 */
function reliefweb_entities_form_taxonomy_term_form_alter(array &$form, FormStateInterface $form_state) {
  EntityFormAlterServiceBase::alterEntityForm($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function reliefweb_entities_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Prevent deletion of taxonomy term referenced by other entities.
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityFormInterface && $form_object->getOperation() === 'delete') {
    $entity = $form_state->getFormObject()->getEntity();
    if (isset($entity) && $entity instanceof TermInterface && $entity->id() !== NULL) {
      if (TaxonomyHelper::isTermReferenced($entity)) {
        $form['actions']['submit']['#access'] = FALSE;
        $form['description']['#markup'] = t('The term CANNOT be deleted because there is content (reports, jobs, training etc.) tagged with it.');
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Remove control characters from text fields.
 */
function reliefweb_entities_entity_presave(EntityInterface $entity) {
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id === 'node' || $entity_type_id === 'taxonomy_term') {
    $field_definitions = \Drupal::service('entity_field.manager')
      ->getFieldDefinitions($entity_type_id, $entity->bundle());

    $text_field_types = [
      'text',
      'text_long',
      'text_with_summary',
      'string',
      'string_long',
    ];
    $columns = [
      'value',
      'summary',
    ];
    $options = [
      'title' => ['line_breaks' => TRUE, 'consecutive' => TRUE],
      'name' => ['line_breaks' => TRUE, 'consecutive' => TRUE],
    ];

    // Clean the text fields.
    foreach ($field_definitions as $field => $definition) {
      if ($entity->hasField($field) && in_array($definition->getType(), $text_field_types)) {
        foreach ($entity->get($field) as $item) {
          foreach ($columns as $column) {
            if (isset($item->{$column})) {
              $value = $item->get($column)->getValue();
              $item->set($column, TextHelper::cleanText($value, $options[$field] ?? []));
            }
          }
        }
      }
    }
  }
}
