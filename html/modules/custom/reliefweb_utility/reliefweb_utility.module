<?php

/**
 * @file
 * Helper functions that applies to a variety of things on ReliefWeb.
 */

use Drupal\Core\Template\Attribute;
use Drupal\file\FileInterface;

/**
 * Implements hook_preprocess().
 *
 * Ensure the attributes and title_attributes are set for the reliefweb
 * templates.
 */
function reliefweb_utility_preprocess(array &$variables, $hook) {
  if (strpos($hook, 'reliefweb_') === 0) {
    foreach ($variables as $key => $value) {
      if ($key === 'attributes' || strpos($key, '_attributes') !== FALSE) {
        if (is_null($value)) {
          $variables[$key] = new Attribute();
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for files.
 *
 * Change the URI of files to use their UUID.
 */
function reliefweb_utility_file_presave(FileInterface $file) {
  $uuid = $file->uuid();
  $uri = $file->getFileUri();

  // Skip the media icons.
  if (strpos($uri, 'public://media-icons/') === 0) {
    return;
  }

  // Let other modules decide if this should apply.
  $apply = TRUE;
  $clone = clone $file;
  \Drupal::moduleHandler()->alter('reliefweb_utility_file_update', $clone, $apply);

  // Only process files with a valid uuid and uri and if not already processed
  // which can be determined by looking for the file uuid in its uri.
  if ($apply && !empty($uuid) && !empty($uri) && preg_match('#/' . $uuid . '#', $uri) !== 1) {
    $file_system = \Drupal::service('file_system');
    $logger = \Drupal::logger('reliefweb_utility');

    // Note: the locale is assumed to be UTF-8.
    $info = pathinfo($uri);

    // Use the existing directory + the first 4 letters of the uuid.
    $directory = implode('/', [
      $info['dirname'],
      substr($uuid, 0, 2),
      substr($uuid, 2, 2),
    ]);

    // We use the UUID as filename, preserving only the extension so that
    // the URI is short and predictable.
    $new_uri = $directory . '/' . $uuid . '.' . strtolower($info['extension']);

    // Prepare the destination directory.
    if (!$file_system->prepareDirectory($directory, $file_system::CREATE_DIRECTORY)) {
      $logger->warning('Unable to create the destination directory: @directory', [
        '@directory' => $directory,
      ]);
    }
    // Move the file.
    elseif (!$file_system->move($uri, $new_uri, $file_system::EXISTS_ERROR)) {
      $logger->warning('Unable to move file @uri to @new_uri', [
        '@uri' => $uri,
        '@new_uri' => $new_uri,
      ]);
    }
    // Update the URI and save the file if the file could be moved.
    else {
      $file->setFileUri($new_uri);
    }
  }
}
