<?php

/**
 * @file
 * Content entity clone module file.
 */

use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * Implements hook_help().
 */
function content_entity_clone_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name === 'help.page.content_entity_clone') {
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('This module enables cloning content entities.') . '</p>';
    return $output;
  }
}

/**
 * Implements hook_entity_prepare_form().
 */
function content_entity_clone_entity_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  // Skip if the user doesn't have the permission to clone entities.
  if (!\Drupal::currentUser()->hasPermission('clone content entities')) {
    return;
  }

  // Skip if there is no request parameter to get the original entity.
  $original_entity_id = \Drupal::request()->get('content_entity_clone');
  if (empty($original_entity_id)) {
    return;
  }

  // Skip if th entity is not valid or is not new.
  if (empty($entity) || !($entity instanceof ContentEntityInterface) || !$entity->isNew()) {
    return;
  }

  // Skip if cloning is not enabled for this entity type bundle.
  $config = \Drupal::config('content_entity_clone.bundle.settings.' . $entity->getEntityTypeId() . '.' . $entity->bundle());
  if (!isset($config) || $config->isNew() || empty($config->get('enabled'))) {
    return;
  }

  // Skip if there is no field to clone.
  $fields = $config->get('fields');
  if (empty($fields)) {
    return;
  }

  // Load the entity to clone and skip if none was found.
  $original = \Drupal::entityTypeManager()
    ->getStorage($entity->getEntityTypeId())
    ->load($original_entity_id);
  if (empty($original)) {
    return;
  }

  // Get the field processor plugin manager.
  $plugin_manager = \Drupal::service('plugin.manager.content_entity_clone.field_processor');

  /** @var \Drupal\Core\Field\FieldItemListInterface $field */
  foreach ($original as $field_name => $field) {
    if (!empty($fields[$field_name]['id'])) {
      // We clone the field to avoid changing the original entity.
      $cloned_field = clone $field;
      // Process the field.
      $plugin_manager->processField($fields[$field_name]['id'], $cloned_field);
      // Copy the processed field values to the new entity.
      $entity->get($field_name)->setValue($cloned_field->getValue());
    }
  }

}

/**
 * Implements hook_module_implements_alter().
 *
 * Try to ensure that the content_entity_clone's hook_entity_prepare_form() hook
 * implementation runs first so that other modules implementing this hook
 * can operate on the entity with the clone field values.
 */
function content_entity_clone_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_prepare_form' && isset($implementations['content_entity_clone'])) {
    $implementations = [
      'content_entity_clone' => $implementations['content_entity_clone'],
    ] + $implementations;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function content_entity_clone_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  $user = \Drupal::currentUser();

  // Skip if there are not local tasks.
  if (empty($data['tabs'][0])) {
    return;
  }

  // Skip if the user doesn't have the permission to clone entities.
  if (!$user->hasPermission('clone content entities')) {
    return;
  }

  // Try find the entity type id from the local tasks.
  foreach ($data['tabs'][0] as $key => $link) {
    if (preg_match('#^entity.(?<entity_type_id>[^.]+).canonical$#', $key, $matches) !== 1) {
      continue;
    }

    // Skip as we cannot retrieve the entity if the canonical link is not
    // defined properly.
    if (!isset($link['#link']['url']) || !($link['#link']['url'] instanceof Url)) {
      return;
    }

    $entity_type_id = $matches['entity_type_id'];
    $parameters = $link['#link']['url']->getRouteParameters();

    // Skip as we cannot retrieve the entity if there is no entity id.
    if (!isset($parameters[$entity_type_id]) || !is_numeric($parameters[$entity_type_id])) {
      return;
    }

    $entity = \drupal::entityTypeManager()
      ->getStorage($entity_type_id)
      ->load($parameters[$entity_type_id]);
  }
  if (!isset($entity) || !($entity instanceof ContentEntityInterface)) {
    return;
  }

  // Retrieve the cloning config for the entity bundle if any.
  $config = \Drupal::config('content_entity_clone.bundle.settings.' . $entity->getEntityTypeId() . '.' . $entity->bundle());
  if (!isset($config) || $config->isNew() || empty($config->get('enabled'))) {
    return;
  }

  // Ensure the local tasks can be refreshed if the configuration changes.
  $cacheability->addCacheableDependency($config);

  // Get the entity creation route from the entity type.
  $entity_creation_route_name = content_entity_clone_get_entity_creation_route_name($entity->getEntityType());
  if (!isset($entity_creation_route_name)) {
    return;
  }

  // Pass the entity bundle as route parameter if necessary.
  $entity_creation_route_parameters = [];
  $bundle_entity_type_id = $entity->getEntityType()->getBundleEntityType();
  if (!empty($bundle_entity_type_id)) {
    $entity_creation_route_parameters = [
      $bundle_entity_type_id => $entity->bundle(),
    ];
  }

  // Check if the user has access to the entity creation route.
  $access = \Drupal::accessManager()->checkNamedRoute(
    $entity_creation_route_name,
    $entity_creation_route_parameters,
    $user,
    TRUE
  );

  // The link is only accesible if the user can also edit the current entity.
  $access = $access->andIf($entity->access('update', $user, TRUE));

  // Ensure the cacheability is up to date.
  $cacheability->addCacheableDependency($access);

  // Add a local task to clone the entity.
  $data['tabs'][0]['content_entity_clone.clone'] = [
    '#theme' => 'menu_local_task',
    '#link' => [
      'title' => $config->get('local_task_label') ?? t('Clone'),
      'url' => Url::fromRoute($entity_creation_route_name, $entity_creation_route_parameters),
      'localized_options' => [
        'query' => [
          'content_entity_clone' => $entity->id(),
        ],
      ],
    ],
    '#access' => $access,
  ];
}

/**
 * Retrieve the creation link for the given entity type.
 *
 * Note: there is no consistent way to get the route to an entity's creation
 * form. Nodes for example don't have an `add_form` route or `add-form` link
 * template. So this methods tries to infer the route from different options.
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *   Entity type.
 *
 * @return string|null
 *   The route name to create a new entity of the given type.
 */
function content_entity_clone_get_entity_creation_route_name(EntityTypeInterface $entity_type) {
  $entity_type_id = $entity_type->id();
  $route_provider = \Drupal::service('router.route_provider');

  // First check if there is an add-form route for the entity.
  try {
    $route = $route_provider->getRouteByName('entity.' . $entity_type_id . '.add_form');
    return 'entity.' . $entity_type_id . '.add_form';
  }
  // If none, try to get the route from the 'add-form', 'create' or 'collection'
  // links.
  catch (RouteNotFoundException $exception) {
    $bundle_entity_type_id = $entity_type->getBundleEntityType();

    $create_path = '';
    if ($entity_type->hasLinkTemplate('add-form')) {
      $create_path = $entity_type->getLinkTemplate('add-form');
    }
    elseif ($entity_type->hasLinkTemplate('create')) {
      $create_path = $entity_type->getLinkTemplate('create') . '/add';
      if (!empty($bundle_entity_type_id)) {
        $create_path .= '/{' . $bundle_entity_type_id . '}';
      }
    }
    elseif ($entity_type->hasLinkTemplate('collection')) {
      $create_path = $entity_type->getLinkTemplate('collection') . '/add';
      if (!empty($bundle_entity_type_id)) {
        $create_path .= '/{' . $bundle_entity_type_id . '}';
      }
    }

    // Try to get the route matching this creation path.
    if (!empty($create_path)) {
      $routes = $route_provider->getRoutesByPattern($create_path);
      foreach ($routes->getIterator() as $name => $route) {
        if ($route->getPath() === $create_path) {
          return $name;
        }
      }
    }
  }
  return NULL;
}
