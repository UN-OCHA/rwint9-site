<?php

/**
 * @file
 * OCHA AI Job tagging.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\reliefweb_moderation\Helpers\UserPostingRightsHelper;
use Drupal\reliefweb_utility\Helpers\UserHelper;

/**
 * Implements hook_form_HOOK_alter().
 */
function reliefweb_job_tagger_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_ids = [
    'node_job_edit_form',
    'node_job_form',
  ];

  if (!in_array($form_id, $form_ids)) {
    return;
  }

  // Display AI info for editors.
  if ($form_id == 'node_job_edit_form') {
    if (UserHelper::userHasRoles(['editor'])) {
      $entity = $form_state->getFormObject()->getEntity();
      if ($entity->hasField('reliefweb_job_tagger_info') && !$entity->reliefweb_job_tagger_info->IsEmpty()) {
        $message = $entity->reliefweb_job_tagger_info->value;

        $form['ai_feedback'] = [
          '#type' => 'processed_text',
          '#text' => $message,
          '#format' => 'html',
          '#weight' => -90,
        ];
      }

    }
  }

  // Check permissions.
  $user = \Drupal::currentUser();
  if ($user->hasPermission('bypass ocha ai job tag')) {
    // Make fields mandatory.
    $form['field_career_categories']['widget']['#required'] = TRUE;

    return;
  }

  if (!$user->hasPermission('enforce ocha ai job tag')) {
    // Make fields mandatory.
    $form['field_career_categories']['widget']['#required'] = TRUE;

    return;
  }

  // Add message for job posters.
  $form['ai_message'] = [
    '#type' => 'fieldset',
    '#attached' => [
      'library' => [
        'reliefweb_job_tagger/ai-message',
      ],
    ],
    '#attributes' => [
      'class' => [
        'ai-message-wrapper',
      ],
    ],
    'message' => [
      '#type' => 'processed_text',
      '#text' => t('The process of posting jobs via ReliefWeb is now even smoother. The form now includes an automated function for the "career", "job experience" and "themes" categories; fewer fields for users to fill and higher efficiency overall.'),
      '#format' => 'html',
      '#weight' => -90,
      '#prefix' => '<div class="messages messages--warning cd-alert cd-alert--warning">',
      '#suffix' => '</div>',
      '#states' => [],
    ],
  ];

  $sources = reliefweb_job_tagger_get_trusted_organizations($user);
  if (empty($sources)) {
    // Non-trusted poster, hide fields.
    $form['field_career_categories']['#access'] = FALSE;
    $form['field_theme']['#access'] = FALSE;

    return;
  }

  // Show and mark fields mandatory for trusted sources.
  $fields = [
    'field_career_categories' => 'required',
    'field_theme' => 'optional',
  ];

  $conditions = [];
  foreach ($sources as $source) {
    $conditions[] = [
      'value' => $source,
    ];
  }

  foreach ($fields as $field => $needed) {
    if ($needed == 'required') {
      $form[$field]['#states'] = [
        'visible' => [
          'select[name="field_source"]' => $conditions,
        ],
        'required' => [
          'select[name="field_source"]' => $conditions,
        ],
      ];
    }
    else {
      $form[$field]['#states'] = [
        'visible' => [
          'select[name="field_source"]' => $conditions,
        ],
      ];
    }
  }

  $form['ai_message']['#states'] = [
    'invisible' => [
      'select[name="field_source"]' => $conditions,
    ],
  ];
}

/**
 * Get a list of trusted sources for a given account.
 */
function reliefweb_job_tagger_get_trusted_organizations($account = NULL) {
  $sources = UserPostingRightsHelper::getUserPostingRights($account);
  $sources = array_filter($sources, function ($info) {
    if (isset($info['job']) && $info['job'] == 3) {
      return TRUE;
    }
  });
  $sources = array_keys($sources);

  return $sources;
}

/**
 * Implements hook_module_implements_alter().
 */
function reliefweb_job_tagger_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move our hook_entity_type_alter() implementation to the end of the list.
    case 'node_presave':
    case 'node_update':
    case 'node_insert':
      $group = $implementations['reliefweb_job_tagger'];
      unset($implementations['reliefweb_job_tagger']);
      $implementations['reliefweb_job_tagger'] = $group;
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function reliefweb_job_tagger_node_presave(EntityInterface $node) {
  // We don't want to react to configuration imports.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  if (!$node instanceof Node) {
    return;
  }

  if ($node->bundle() != 'job') {
    return;
  }

  if ($node->moderation_status->value != 'pending') {
    $node->set('reliefweb_job_tagger_status', '');
    return;
  }

  // Check permissions.
  $user = \Drupal::currentUser();
  if ($user->hasPermission('bypass ocha ai job tag')) {
    return;
  }

  if (!$user->hasPermission('enforce ocha ai job tag')) {
    return;
  }

  // Only queue it when fields are empty.
  if (!$node->field_career_categories->isEmpty()) {
    return;
  }

  if (!$node->field_theme->isEmpty()) {
    return;
  }
  if ($node->reliefweb_job_tagger_status->isEmpty()) {
    $node->setNewRevision(FALSE);
    $node->set('reliefweb_job_tagger_status', 'queue');
  }
}

/**
 * Implements hook_entity_after_save().
 *
 * @see \Drupal\reliefweb_entities\BundleEntityStorageInterface
 */
function reliefweb_job_tagger_entity_after_save(EntityInterface $entity) {
  // We don't want to react to configuration imports.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  $entity_type_id = $entity->getEntityTypeId();

  if ($entity_type_id !== 'node') {
    return;
  }

  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->hasField('reliefweb_job_tagger_status') && $entity->get('reliefweb_job_tagger_status')->value == 'queue') {
    reliefweb_job_tagger_queue_job($entity);

    $entity->set('reliefweb_job_tagger_status', 'queued');
    $entity->setRevisionLogMessage('Job has been queued for tagging');
    $entity->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @see reliefweb_job_tagger_entity_after_save()
 */
function reliefweb_job_tagger_node_insert(Node $node) {
  // Needed to avoid exceptions.
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @see reliefweb_job_tagger_entity_after_save()
 */
function reliefweb_job_tagger_node_update(Node $node) {
  // Needed to avoid exceptions.
}

/**
 * Queue the job for tagging.
 */
function reliefweb_job_tagger_queue_job(Node $job) : void {
  /** @var \Drupal\Core\Queue\QueueInterface $queue */
  $queue = \Drupal::service('queue')->get('reliefweb_job_tagger');

  $item = new \stdClass();
  $item->nid = $job->id();
  $queue->createItem($item);
}
