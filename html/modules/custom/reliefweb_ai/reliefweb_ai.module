<?php

/**
 * @file
 * ReliefWeb AI module file.
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Database\Statement\FetchAs;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\reliefweb_ai\OchaAiChatPopupBlockHandler;
use Drupal\reliefweb_utility\Helpers\HtmlSanitizer;
use Drupal\reliefweb_utility\Helpers\HtmlSummarizer;
use Drupal\reliefweb_utility\Helpers\LanguageHelper;
use Drupal\reliefweb_utility\Helpers\TextHelper;
use Drupal\ocha_content_classification\Entity\ClassificationWorkflowInterface;
use Drupal\ocha_content_classification\Plugin\ClassifierPluginInterface;
use Drupal\ocha_content_classification\Enum\ClassificationStatus;

/**
 * Implements hook_theme().
 */
function reliefweb_ai_theme() {
  return [
    'reliefweb_ai_summary_disclaimer' => [
      'variables' => [
        // Section attributes.
        'attributes' => NULL,
        // Text.
        'disclaimer' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for `ocha_ai_chat_chat_form`.
 */
function reliefweb_ai_form_ocha_ai_chat_chat_form_alter(array &$form, FormStateInterface $form_state, string $form_id) {
  $config = \Drupal::config('reliefweb_ai.settings');
  $current_user = \Drupal::currentUser();
  $url = \Drupal::request()?->query?->get('url');

  // Add some caching context and tags.
  $form['#cache']['contexts'] = array_merge($form['#cache']['contexts'] ?? [], [
    'user.roles', 'url.query_args',
  ]);
  $form['#cache']['tags'] = array_merge($form['#cache']['tags'] ?? [], [
    'config:reliefweb_ai.settings',
  ]);

  // Add a more unique class to the chat submit button.
  if (isset($form['actions']['submit'])) {
    $form['actions']['submit']['#attributes']['class'][] = 'ocha-ai-chat-ask';
  }

  // Message to display if the form is disabled for any reason.
  $disabled = '';

  // Check if the user is anonymous and not allowed to access the chat.
  if ($current_user->isAnonymous() && !$config->get('ocha_ai_chat.allow_for_anonymous')) {
    $disabled = $config->get('ocha_ai_chat.login_instructions') ?? '';

    // Redirect to the current page if possible.
    if (!empty($url)) {
      $disabled = strtr($disabled, [
        '@destination' => UrlHelper::encodePath(parse_url($url, \PHP_URL_PATH)),
      ]);
    }
  }

  if (empty($disabled)) {
    // Check if we have a URL to allow the chat.
    if (empty($url)) {
      $instructions = t('<p>Something went wrong.</p>');
    }
    // Otherwise check if the language or type of the document.
    else {
      $router = \Drupal::service('router.no_access_checks');
      $parameters = $router->match($url);
      $node = $parameters['node'] ?? NULL;

      // Disable the form if it's not a report.
      if (!isset($node) || $node->bundle() !== 'report') {
        $disabled = t('<p>Something went wrong.</p>');
      }
      else {
        // No need to show the source when chatting with a single report.
        if (isset($form['source'])) {
          $form['source']['#access'] = FALSE;
        }

        // Only English documents are supported due to LLM limitations.
        $is_english_report = FALSE;
        foreach ($node->field_language as $item) {
          if ($item->target_id == 267) {
            $is_english_report = TRUE;
            break;
          }
        }
        if (!$is_english_report) {
          $disabled = t('<p>Sorry, only <strong>English</strong> reports are supported.</p>');
        }

        // Non supported content formats.
        foreach ($node->field_content_format as $item) {
          if ($item->target_id == 12) {
            $disabled = t('<p>Sorry, <strong>maps</strong> are not supported.</p>');
            break;
          }
          elseif ($item->target_id == 12570) {
            $disabled = t('<p>Sorry, <strong>infographics</strong> are not supported.</p>');
            break;
          }
          elseif ($item->target_id == 38974) {
            $disabled = t('<p>Sorry, <strong>interactive reports</strong> are not supported.</p>');
            break;
          }
        }
      }
    }
  }

  if (!empty($disabled)) {
    // Check whether we are requested to replace the instructions or append the
    // disabled instructions.
    $replace = $config->get('ocha_ai_chat.instructions_replace') === TRUE || !isset($form['chat']['content']);

    if (!$replace) {
      // We cannot just append the instructions to the current ones because of
      // the text format may include sanitation that removes the target
      // attributes. We indeed need to preserve those attributes in the login
      // instructions so the login and register links open in parent window
      // and not in the chat iframe.
      // So first we format the current instructions and then append the extra
      // instructions.
      $text = $form['chat']['content']['#text'] ?? '';
      $format = $form['chat']['content']['#format'] ?? 'markdown_editor';
      $instructions = (string) check_markup($text, $format);
      $disabled = $instructions . $disabled;
    }

    // Replace the instructions with a simple markup render element.
    $form['chat']['content'] = [
      '#type' => 'markup',
      '#markup' => $disabled,
      '#prefix' => '<div id="ocha-ai-chat-instructions" class="ocha-ai-chat-chat-form__instructions">',
      '#suffix' => '</div>',
    ];

    // Disable or hide the reset of the form.
    foreach (Element::children($form['chat']) as $key) {
      if ($key !== 'content') {
        $form['chat'][$key]['#access'] = FALSE;
      }
    }
    foreach (Element::children($form) as $key) {
      if ($key !== 'chat') {
        $form[$key]['#disabled'] = TRUE;
      }
    }

    $form['#cache']['max-age'] = 3600;
  }
}

/**
 * Implements hook_block_view_alter().
 */
function reliefweb_ai_block_view_alter(array &$build, BlockPluginInterface $block): void {
  // Alter the chat popup block, notably to adjust the caching.
  if ($block->getPluginId() === 'ocha_ai_chat_chat_popup') {
    $build['#pre_render'][] = [OchaAiChatPopupBlockHandler::class, 'alterBuild'];
    return;
  }
}

/**
 * Implements hook_ocha_content_classification_classified_fields_alter().
 *
 * Sanitize the data returned by the AI.
 */
function reliefweb_ai_ocha_content_classification_classified_fields_alter(
  array &$classified_fields,
  ClassificationWorkflowInterface $workflow,
  array &$context,
) {
  // Only the inference classifier is supported here.
  if ($context['classifier']->getPluginId() !== 'inference') {
    return NULL;
  }

  // Sanitize the fillable text fields.
  foreach ($classified_fields['fillable'] ?? [] as $field_name => $values) {
    foreach ($values as $property => $value) {
      if (!empty($value)) {
        $preserve_whitespaces = $field_name === 'body' && $property === 'value';
        $value = Html::decodeEntities($value);
        $value = strip_tags($value);
        $value = TextHelper::sanitizeText($value, $preserve_whitespaces);
        $classified_fields['fillable'][$field_name][$property] = $value;
      }
    }
  }
}

/**
 * Implements hook_ocha_content_classification_post_classify_entity().
 *
 * Try to determine the language after the usual report classification workflow.
 *
 * @todo replace when the ocha_content_classification module handles multi-steps
 * classification.
 */
function reliefweb_ai_ocha_content_classification_post_classify_entity(
  EntityInterface $entity,
  ClassificationWorkflowInterface $workflow,
  ClassifierPluginInterface $classifier,
  array $updated_fields,
  array $data,
): ?array {
  // Prevent processing again the entity.
  if (isset($entity->postClassificationDone)) {
    return NULL;
  }
  $entity->postClassificationDone = TRUE;

  // This hook currently only handles reports.
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'report') {
    return NULL;
  }

  // Only the inference classifier is supported here.
  if ($classifier->getPluginId() !== 'inference') {
    return NULL;
  }

  // Attempt to retrieve the language.
  $language_updated_fields = reliefweb_ai_post_classification_language_update(
    $entity,
    $workflow,
    $classifier,
    $updated_fields,
    $data,
  ) ?? [];

  // Attempt to fix the body.
  $body_updated_fields = reliefweb_ai_post_classification_body_update(
    $entity,
    $workflow,
    $classifier,
    $updated_fields,
    $data,
  ) ?? [];

  return array_unique(array_merge($language_updated_fields, $body_updated_fields)) ?: NULL;
}

/**
 * Update the language field of an entity based on some extracted text samples.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being classified.
 * @param \Drupal\ocha_content_classification\Entity\ClassificationWorkflowInterface $workflow
 *   The classification workflow.
 * @param \Drupal\ocha_content_classification\Plugin\ClassifierPluginInterface $classifier
 *   The classifier plugin for the classification.
 * @param array $updated_fields
 *   The list of fields that have been updated during the classification so far.
 * @param array $data
 *   Additional data from the classifier. For the inference classifier, this
 *   contains an `output` key with the raw output from the LLM.
 *
 * @return ?array
 *   An array with the language field if it was updated.
 */
function reliefweb_ai_post_classification_language_update(
  EntityInterface $entity,
  ClassificationWorkflowInterface $workflow,
  ClassifierPluginInterface $classifier,
  array $updated_fields,
  array $data,
): ?array {
  if (!$entity->hasField('field_language') || empty($data['output'])) {
    return NULL;
  }

  // Call the hook so other modules can set the language.
  $module_handler = \Drupal::moduleHandler();
  $lang_code = $module_handler->invokeAll('reliefweb_ai_force_language', [$entity]);
  if ($lang_code) {
    // If multiple modules return a language, use the first non-null one.
    if (is_array($lang_code)) {
      $lang_code = array_values($lang_code);
      $lang_code = reset($lang_code);
    }
    if ($lang_code) {
      $entity->set('field_language', $lang_code);
      return ['field_language'];
    }
  }

  $settings = \Drupal::config('reliefweb_ai.settings')->get('language_detection');
  if (empty($settings)) {
    return NULL;
  }

  // Retrieve the text samples extracted from the source document.
  $tag = $settings['tag'] ?? 'content';
  $text = reliefweb_ai_extract_text_from_llm_output($data['output'], $tag, $classifier);

  // Add the title.
  if (!empty($settings['user_title'])) {
    $title = (string) $entity->label();
    $text = $title . ' ' . $text;
  }

  $text = trim(strip_tags($text));
  if (!empty($text)) {
    // Detect the language from the content returned by the AI.
    $language = LanguageHelper::detectTextLanguage($text);
  }
  else {
    // Default to English.
    $language = 'en';
  }

  // Retrieve the available languages.
  $languages = \Drupal::database()
    ->select('taxonomy_term__field_language_code', 't')
    ->fields('t', ['field_language_code_value', 'entity_id'])
    ->execute()
    ?->fetchAllKeyed() ?? [];
  $languages = array_change_key_case($languages, \CASE_LOWER);

  // Default to Other if there is no matching term for the language code.
  $language_term_id = $languages[$language] ?? $languages['ot'] ?? NULL;

  // Update the entity with the detected language.
  if ($language_term_id != $entity->field_language?->target_id) {
    $entity->set('field_language', $language_term_id);
    return ['field_language'];
  }

  return NULL;
}

/**
 * Update the body field of an entity based using the fixed AI extracted text.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being classified.
 * @param \Drupal\ocha_content_classification\Entity\ClassificationWorkflowInterface $workflow
 *   The classification workflow.
 * @param \Drupal\ocha_content_classification\Plugin\ClassifierPluginInterface $classifier
 *   The classifier plugin for the classification.
 * @param array $updated_fields
 *   The list of fields that have been updated during the classification so far.
 * @param array $data
 *   Additional data from the classifier. For the inference classifier, this
 *   contains an `output` key with the raw output from the LLM.
 *
 * @return ?array
 *   An array with the body field if it was updated.
 */
function reliefweb_ai_post_classification_body_update(
  EntityInterface $entity,
  ClassificationWorkflowInterface $workflow,
  ClassifierPluginInterface $classifier,
  array $updated_fields,
  array $data,
): ?array {
  if (!$entity->hasField('body') || !$entity->hasField('field_file') || $entity->get('field_file')->isEmpty() || empty($data['output'])) {
    return NULL;
  }

  // Skip if there is no setting to fix the text extraction.
  $settings = \Drupal::config('reliefweb_ai.settings')->get('text_extract_fix');
  if (empty($settings)) {
    return NULL;
  }

  // Skip if the text extraction fix step is not enabled.
  if (empty($settings['enabled'])) {
    return NULL;
  }

  // Skip if the file field is not used for the analysis.
  $analyzable_fields = $classifier->getEnabledFields('analyzable');
  if (empty($analyzable_fields['field_file']['file']) || empty($analyzable_fields['field_file']['processor'])) {
    return NULL;
  }

  // Retrieve the AI plugin.
  $ai_plugin = \Drupal::service('plugin.manager.ocha_ai.completion')
    ->getPlugin($settings['inference']['plugin_id']);
  if (empty($ai_plugin)) {
    return NULL;
  }

  // Retrieve the text samples extracted from the source document.
  $tag = $settings['tag'] ?? 'content';
  $extracted_text = reliefweb_ai_extract_text_from_llm_output($data['output'], $tag, $classifier);
  if (empty($extracted_text)) {
    return NULL;
  }

  // Create a clone of the entity ready for classification, so that we can
  // filter the file field without altering the original entity.
  $entity_clone = clone $entity;
  $file_field = $entity_clone->get('field_file');

  // Filter out files that are not supported or too large.
  // @see \Drupal\ocha_content_classification\Plugin\OchaContentClassifier\InferenceClassifier::prepareEntity()
  $supported_file_types = $ai_plugin->getSupportedFileTypes();
  $processor_plugin_manager = \Drupal::service('plugin.manager.ocha_content_classification.analyzable_field_processor');
  $processor_plugin_id = $analyzable_fields['field_file']['processor'];
  $processor_plugin = $processor_plugin_manager->createInstance($processor_plugin_id);
  $processor_plugin->filterFiles($file_field, $supported_file_types);

  // Skip if there is no file left.
  if ($file_field->isEmpty()) {
    return NULL;
  }

  // Extract the file text.
  $file_lines = [];
  foreach ($file_field as $item) {
    $file_text = $item->extractText();
    if (!empty($file_text)) {
      foreach (explode("\n", $file_text) as $line) {
        $line = trim($line);
        if ($line !== '') {
          $file_lines[] = $line;
        }
      }
    }
  }
  if (empty($file_lines)) {
    return NULL;
  }

  $source_lines = '';
  try {
    $endpoint = $settings['line_matching']['endpoint'] ?? '';
    if (empty($endpoint)) {
      return NULL;
    }

    $response = \Drupal::httpClient()->post($endpoint, [
      'json' => [
        // Doesn't matter for this endpoint.
        'language' => 'en',
        'text' => $extracted_text,
        'lines' => $file_lines,
        'threshold' => $settings['line_matching']['threshold'] ?? 70,
      ],
    ]);

    $response_data = $response->getBody()->getContents();
    $response_data = json_decode($response_data, TRUE, flags: \JSON_THROW_ON_ERROR);

    $source_lines = implode("\n", $response_data['lines'] ?? []);
  }
  catch (\Exception $exception) {
    \Drupal::logger('reliefweb_ai')->error(strtr('Error while trying to find the matching source lines: @error', [
      '@error' => strtr($exception->getMessage(), "\n", ' '),
    ]));
    return NULL;
  }

  // Skip if there is no matching source lines.
  if (empty($source_lines)) {
    return NULL;
  }

  // Retrieve the summary if any.
  $summary_tag = $settings['summary_tag'] ?? '';
  $summary = reliefweb_ai_extract_text_from_llm_output($data['output'], $summary_tag, $classifier);

  // Call the LLM to fix the extracted text.
  try {
    if (empty($settings['inference']['plugin_id']) || empty($settings['inference']['prompt'])) {
      return NULL;
    }

    // Retrieve the model parameters.
    $parameters = [
      'temperature' => (float) ($settings['inference']['temperature'] ?? 0.0),
      'top_p' => (float) ($settings['inference']['top_p'] ?? 0.9),
      'max_tokens' => (int) ($settings['inference']['max_tokens'] ?? 4000),
    ];

    // Retrieve the prompt and inject the extracted text and source lines.
    $system_prompt = $settings['inference']['system_prompt'] ?? '';
    $prompt = strtr($settings['inference']['prompt'], [
      '{extracted_text}' => $extracted_text,
      '{source_lines}' => $source_lines,
      '{summary}' => $summary,
    ]);

    // Query the LLM to classify the job.
    $output = $ai_plugin->query($prompt, $system_prompt, $parameters, TRUE);
    if (empty($output)) {
      throw new \Exception('Empty output.');
    }

    // Retrieve the corrected text.
    $corrected_text = reliefweb_ai_extract_text_from_llm_output($output, 'corrected_text', $classifier, TRUE, TRUE);

    // Basic similarity check.
    if (TextHelper::getTextSimilarity($extracted_text, $corrected_text) < 70) {
      throw new \Exception('Corrected text too dissimilar.');
    }

    if (!empty($summary)) {
      // Retrieve the corrected text.
      $corrected_summary = reliefweb_ai_extract_text_from_llm_output($output, 'corrected_summary', $classifier, TRUE, TRUE);

      // Basic similarity check.
      if (TextHelper::getTextSimilarity($summary, $corrected_summary) < 70) {
        throw new \Exception('Corrected summary too dissimilar.');
      }

      $body_value = $corrected_summary;
    }
    else {
      $body_value = $corrected_text;
    }

    $body = $entity->get('body');
    // Retrieve the first field item or create a new one.
    $body_item = $body->first() ?? $body->appendItem()->applyDefaultValue(FALSE);
    // Update the body value and use the default format.
    $body_item->set('value', $body_value);
    $body_item->set('format', 'markdown');

    return ['body'];
  }
  catch (\Exception $exception) {
    \Drupal::logger('reliefweb_ai')->error(strtr('Unable to fix AI extracted text: @error', [
      '@error' => $exception->getMessage(),
    ]));
    return NULL;
  }

  return NULL;
}

/**
 * Extract text from a LLM output.
 *
 * @param string $output
 *   LLM output.
 * @param string $tag
 *   XML tag contaning the text to extract.
 * @param \Drupal\ocha_content_classification\Plugin\ClassifierPluginInterface $classifier
 *   Classifier plugib.
 * @param bool $preserve_new_lines
 *   TRUE to preserve new lines when sanitizing the text.
 * @param bool $throw_if_missing
 *   TRUE to throw an exception if the tag was not found in the output.
 *
 * @return string
 *   Sanitized extracted text.
 */
function reliefweb_ai_extract_text_from_llm_output(
  string $output,
  string $tag,
  ClassifierPluginInterface $classifier,
  bool $preserve_new_lines = TRUE,
  bool $throw_if_missing = FALSE,
): string {
  if (empty($output) || empty($tag)) {
    return '';
  }

  // Extract the text content for the fillable field.
  //
  // Note: we assume the content is plain text (or markdown) without
  // XML/HTML tags.
  //
  // @todo we may need something more robust to handle different formats.
  try {
    $content = $classifier->extractTaggedContent($output, $tag);
  }
  catch (\Exception $exception) {
    if ($throw_if_missing) {
      throw $exception;
    }
    else {
      return '';
    }
  }

  if (!empty($content)) {
    // The extracted values may be between tags like paragraph tags.
    if (mb_strpos($content, "</") !== FALSE) {
      $parts = $classifier->extractValuesBetweenTags($content);
      if (!empty($parts)) {
        $parts = array_map(fn($part) => TextHelper::sanitizeText($part, $preserve_new_lines, 2), $parts);
        // We "glue" the parts using 2 line breaks which is the standard way
        // to separate paragraphs in markdown.
        $content = implode("\n\n", $parts);
      }
      else {
        $content = '';
      }
    }
    else {
      $content = TextHelper::sanitizeText($content, $preserve_new_lines);
    }
  }

  if (!empty($content)) {
    $content = Html::decodeEntities($content);
    $content = strip_tags($content);
  }

  return $content;
}

/**
 * Implements hook_preprocess_reliefweb_entities_entity_meta().
 *
 * Add a class to the fields that have been updated by an AI.
 */
function reliefweb_ai_preprocess_reliefweb_entities_entity_meta(array &$variables): void {
  if (!isset($variables['entity'])) {
    return;
  }

  $entity = $variables['entity'];
  if (!isset($entity->ai_updated_fields)) {
    return;
  }

  foreach ($variables['meta'] ?? [] as $key => $data) {
    if (isset($data['field'], $entity->ai_updated_fields[$data['field']])) {
      $label_attributes = $data['label_attributes'] ?? new Attribute();
      $label_attributes->addClass('rw-ai-generated');
      $variables['meta'][$key]['label_attributes'] = $label_attributes;
    }
  }
}

/**
 * Implements hook_entity_view().
 *
 * Add the AI disclaimer to the entity view render array if the entity's body
 * was modified by AI.
 */
function reliefweb_ai_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if (isset($entity->ai_updated_fields['body'])) {
    $ai_summary_disclaimer = \Drupal::state()->get('reliefweb_ai_summary_disclaimer');
    if (!empty($ai_summary_disclaimer)) {
      $build['ai_summary_disclaimer'] = [
        '#theme' => 'reliefweb_ai_summary_disclaimer',
        '#disclaimer' => $ai_summary_disclaimer,
      ];
    }
  }
}

/**
 * Implements hook_entity_view().
 *
 * Retrieve the entity fields that were updated by an AI, if any.
 */
function reliefweb_ai_entity_prepare_view(string $entity_type_id, array $entities, array $displays, string $view_mode): void {
  if ($view_mode !== 'full') {
    return;
  }

  foreach ($entities as $entity) {
    reliefweb_ai_add_ai_updated_fields_to_entity($entity);
  }
}

/**
 * Add a list of the fields updated by an AI to the given entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 */
function reliefweb_ai_add_ai_updated_fields_to_entity(EntityInterface $entity): void {
  // Get the classification record for the entity if any.
  $record = \Drupal::database()
    ->select('ocha_content_classification_progress', 'ocp')
    ->fields('ocp', ['entity_revision_id', 'updated_fields'])
    ->condition('entity_type_id', $entity->getEntityTypeId())
    ->condition('entity_bundle', $entity->bundle())
    ->condition('entity_id', $entity->id())
    ->condition('status', ClassificationStatus::Completed->value)
    ->execute()
    ?->fetch(FetchAs::Object);
  if (empty($record) || empty($record->entity_revision_id) || empty($record->updated_fields)) {
    return;
  }

  $updated_fields = json_decode($record->updated_fields);
  if (empty($updated_fields)) {
    return;
  }

  // Not using strict equality because they may be numeric strings.
  if ($entity->getRevisionId() != $record->entity_revision_id) {
    $revision = \Drupal::entityTypeManager()
      ->getStorage($entity->getEntityTypeId())
      ->loadRevision($record->entity_revision_id);

    if (empty($revision)) {
      return;
    }

    // Remove fields that have been updated since the classification. They are
    // considered to have been manually updated so not generated by an AI
    // anymore.
    foreach ($updated_fields as $index => $field_name) {
      if (!$entity->get($field_name)->equals($revision->get($field_name))) {
        unset($updated_fields[$index]);
      }
    }

    if (empty($updated_fields)) {
      return;
    }
  }

  // Store the list of fields that were populated by the AI for easy lookup.
  $entity->ai_updated_fields = array_flip($updated_fields);
}

/**
 * Implements hook_preprocess_reliefweb_rivers_page__updates().
 *
 * Retrieve the AI summary from the database.
 *
 * @todo remove after the `summary` field is added to the API.
 */
function reliefweb_ai_preprocess_reliefweb_rivers_page__updates(array &$variables): void {
  // No need to retrieve the summary if we are showing the headlines since we
  // already display the headline summary.
  if (isset($variables['view']) && $variables['view'] === 'headlines') {
    return;
  }

  if (empty($variables['content']['#entities'])) {
    return;
  }

  // Retrieve the summary from the database.
  $query = \Drupal::database()->select('node', 'n');
  $query->leftJoin('node__field_headline_summary', 's', '%alias.entity_id = n.nid');
  $query->leftJoin('node__body', 'b', '%alias.entity_id = n.nid');
  $query->condition('n.nid', array_keys($variables['content']['#entities']), 'IN');
  $query->addField('n', 'nid', 'id');
  $query->addField('s', 'field_headline_summary_value', 'headline_summary');
  $query->addField('b', 'body_summary', 'summary');

  foreach ($query->execute() ?? [] as $record) {
    $summary = '';
    if (!empty($record->headline_summary)) {
      $summary = $record->headline_summary;
    }
    elseif (!empty($record->summary)) {
      if (mb_strlen($record->summary) > 250) {
        $summary = HtmlSanitizer::sanitize($record->summary);
        $summary = HtmlSummarizer::summarize($summary, 250);
      }
      else {
        $summary = preg_replace('/\s+/', ' ', $record->summary);
      }
    }
    if (!empty($summary)) {
      $variables['content']['#entities'][$record->id]['summary'] = $summary;
    }
  }
}

/**
 * Implements hook_entity_prepare_form().
 *
 * Show a message when editing an entity being classified.
 */
function reliefweb_ai_entity_prepare_form(EntityInterface $entity, string $operation, FormStateInterface $form_state): void {
  if ($operation === 'edit' && !$entity->isNew()) {
    $workflow = \Drupal::service('ocha_content_classification.content_entity_classifier')->getWorkflowForEntity($entity);
    if (!isset($workflow)) {
      return;
    }
    // Display a warning message when trying to edit a document with an ongoing
    // classification.
    $record = $workflow->getClassificationProgress($entity);
    if (isset($record['status']) && $record['status'] === ClassificationStatus::Queued) {
      $key = "ocha_content_classification_ongoing_warning:{$workflow->id()}";
      $message = \Drupal::state()->get($key);
      if (!empty($message)) {
        // phpcs:ignore Drupal.Semantics.FunctionT.NotLiteralString
        \Drupal::messenger()->addWarning(t($message));
      }
    }
  }
}
