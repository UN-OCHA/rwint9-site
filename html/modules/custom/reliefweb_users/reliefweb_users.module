<?php

/**
 * @file
 * Module file for reliefweb_users.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function reliefweb_users_theme() {
  $themes = [
    'reliefweb_users_page' => [
      'variables' => [
        // Filters form.
        'filters' => NULL,
        // Attributes for the filters.
        'filters_attributes' => NULL,
        // List of users.
        'list' => NULL,
        // Attributes for the list.
        'list_attributes' => NULL,
      ],
    ],
  ];
  return $themes;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function reliefweb_users_menu_local_tasks_alter(array &$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  if (isset($data['tabs'][0]['entity.user.canonical'])) {
    $data['tabs'][0]['entity.user.canonical']['#link']['title'] = t('Dashboard');
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function reliefweb_users_menu_local_actions_alter(&$local_actions) {
  // Remove the create user action on the "people" page.
  unset($local_actions['user_admin_create']);
}

/**
 * Implements hook_form_user_form_alter().
 */
function reliefweb_users_form_user_form_alter(array &$form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser();

  // This will prevent asking for the password when changing the email address.
  $form_state->set('user_pass_reset', TRUE);

  // Unncessary fields.
  $form['contact']['#access'] = FALSE;
  $form['details']['#access'] = FALSE;
  $form['footer']['#access'] = FALSE;
  $form['language']['#access'] = FALSE;
  $form['timezone']['#access'] = FALSE;

  // Only people who can administrate other accounts can add notes.
  $form['field_notes']['#access'] = $user->hasPermission('administer users');

  $form['account']['mail']['#title'] = t('Email');
  $form['account']['mail']['#description'] = t('Email address used for notifications and contact.');

  // Only people who can administrate other accounts can confirm an email.
  if ($user->hasPermission('administer users')) {
    // Add a flag to bypass sending an email confirmation message when
    // confirmed is checked.
    $form_state->getFormObject()->getEntity()->_bypass_email_confirmation = TRUE;
  }
  else {
    $form['field_email_confirmed']['#access'] = FALSE;

    if (isset($form['actions']['submit']['#submit'])) {
      $form['actions']['submit']['#submit'][] = 'reliefweb_users_user_form_submit';
    }
    else {
      $form['#submit'][] = 'reliefweb_users_user_form_submit';
    }

    if (empty($form_state->getFormObject()?->getEntity()?->field_email_confirmed?->value)) {
      $form['account']['mail']['#title'] = t('@title (not confirmed)', [
        '@title' => $form['account']['mail']['#title'],
      ]);
      $form['account']['mail']['#description'] = t('@description<br>A message with a link to confirm your email address will be sent when saving your account settings.', [
        '@description' => $form['account']['mail']['#description'] ?? '',
      ]);
    }
  }

  // Add a validation callback to the email field to ensure it's already used
  // by another account.
  $form['account']['mail']['#element_validate'][] = 'reliefweb_users_validate_email';

  // Check if hte user is allowed to assign roles.
  if ($user->hasPermission('manage user roles') && !empty($form['account']['roles']['#options'])) {
    $form['account']['roles']['#access'] = TRUE;

    $default_roles = $form['account']['roles']['#default_value'] ?? [];

    foreach ($form['account']['roles']['#options'] as $role => $label) {
      if ($role === RoleInterface::ANONYMOUS_ID) {
        continue;
      }
      // No need to display the authenticated role.
      elseif ($role === RoleInterface::AUTHENTICATED_ID) {
        $form['account']['roles'][$role]['#access'] = FALSE;
      }
      // Only display the roles that can be assigned by the current user.
      elseif (!$user->hasPermission('assign ' . $role . ' role')) {
        $form['account']['roles'][$role]['#access'] = FALSE;
        $form['account']['roles'][$role]['#disabled'] = TRUE;
        $form['account']['roles'][$role]['#default_value'] = in_array($role, $default_roles);
      }
    }
  }
  else {
    $form['account']['roles']['#access'] = FALSE;
  }
}

/**
 * User form submit callback.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function reliefweb_users_user_form_submit(array $form, FormStateInterface $form_state) {
  if (!empty($form_state->getFormObject()?->getEntity()?->_send_email_confirmation)) {
    \Drupal::messenger()->addStatus(t('A message to confirm your email address has been sent.'));
  }
}

/**
 * Implements hook_form_user_form_alter().
 */
function reliefweb_users_validate_email(array &$element, FormStateInterface $form_state, array $form) {
  $email = trim($form_state->getValue($element['#parents'], ''));

  // Check if the email is already used by another account.
  if (!empty($email)) {
    $user_id = $form_state->getFormObject()?->getEntity()?->id();

    $exists = \Drupal::database()
      ->select('users_field_data', 'u')
      ->fields('u', ['mail'])
      ->condition('u.mail', $email, '=')
      ->condition('u.uid', $user_id, '<>')
      ->range(0, 1)
      ->execute()
      ?->fetchField();

    if (!empty($exists)) {
      $form_state->setError($element, t('Email address already used by another account'));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for 'user'.
 */
function reliefweb_users_user_presave(EntityInterface $entity) {
  // Populate the email field for new accounts.
  if ($entity->isNew()) {
    $entity->field_email_confirmed->value = 1;
  }
  // Add a flag to send an email confirmation message.
  elseif (empty($entity->_bypass_email_confirmation)) {
    $previous_email = $entity->getOriginal()?->getEmail() ?? '';
    $current_email = $entity->getEmail() ?? '';
    $confirmed = !empty($entity->field_email_confirmed?->value);

    if (!empty($current_email)) {
      if (($current_email !== $previous_email) || !$confirmed) {
        $entity->field_email_confirmed->value = 0;
        $entity->_send_email_confirmation = TRUE;
      }
    }
    else {
      $entity->field_email_confirmed->value = 0;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for 'user'.
 */
function reliefweb_users_user_update(EntityInterface $entity) {
  if (!empty($entity->_send_email_confirmation)) {
    $langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
    $email = $entity->getEmail();

    // Send an email to ask for confirmation of the email address.
    if (!empty($email)) {
      \Drupal::service('plugin.manager.mail')->mail('reliefweb_users', 'email_confirmation', $email, $langcode, [
        'user' => $entity,
      ]);
    }
  }
}

/**
 * Implements hook_mail().
 */
function reliefweb_users_mail($key, array &$message, array $params) {
  if ($key === 'email_confirmation' && !empty($params['user'])) {
    $user = $params['user'];

    $link = reliefweb_users_get_email_confirmation_url($user);

    $body = \Drupal::state()->get('reliefweb_users_email_confirmation_message', implode("\n\n", [
      'Dear @user',
      'You just added this email address to your profile on https://reliefweb.int.',
      'Please confirm it by clicking or copying and pasting the following link into your browser:',
      '@link',
      'Kinds regards,',
      'The ReliefWeb Team',
    ]));

    $message['subject'] = 'ReliefWeb - Email address confirmation';
    $message['body'][] = strtr($body, [
      '@user' => $user->label(),
      '@link' => $link,
    ]);
  }
}

/**
 * Generate an email confirmation URL for the given user.
 *
 * @param \Drupal\user\UserInterface $user
 *   User entity.
 *
 * @return string
 *   Email confirmation URL.
 */
function reliefweb_users_get_email_confirmation_url(UserInterface $user) {
  $timestamp = \Drupal::time()->getRequestTime();
  $hash = reliefweb_users_get_email_confirmation_hash($user, $timestamp);

  return Url::fromRoute('user.email.confirmation', [
    'uid' => $user->id(),
    'timestamp' => $timestamp,
    'hash' => $hash,
  ], [
    'absolute' => TRUE,
  ])->toString();
}

/**
 * Generate the hash for the email confirmation URL for the given user.
 *
 * @param \Drupal\user\UserInterface $user
 *   User entity.
 * @param int $timestamp
 *   Timestamp.
 *
 * @return string
 *   Email confirmation hash
 */
function reliefweb_users_get_email_confirmation_hash(UserInterface $user, $timestamp) {
  $email = $user->getEmail();
  $confirmed = !empty($user->field_email_confirmed->value) ? '1' : '0';
  $data = implode('/', [$user->id(), $timestamp, $email, $confirmed]);
  return Crypt::hmacBase64($data, Settings::getHashSalt() . $email);
}

/**
 * Implements hook_entity_type_alter().
 */
function reliefweb_users_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['user']->setLinkTemplate('posting-rights', '/user/{user}/posting-rights');
}

/**
 * Implements hook_preprocess_HOOK() for user templates.
 */
function reliefweb_users_preprocess_user(array &$variables): void {
  $user = $variables['user'] ?? \Drupal::currentUser();

  $potential_links = [
    [
      'title' => t('Edit your account details'),
      'url' => Url::fromUri('internal:/user/' . $user->id() . '/edit'),
      'description' => t('Edit your credentials and account information.'),
    ],
    [
      'title' => t('Manage your subscriptions'),
      'url' => Url::fromUri('internal:/user/' . $user->id() . '/notifications'),
      'description' => t('Setup and manage your email subscriptions to new reports, jobs and more.'),
    ],
    [
      'title' => t('Manage your bookmarks'),
      'url' => Url::fromUri('internal:/user/' . $user->id() . '/bookmarks'),
      'description' => t('Track content relevant to you on the site.'),
    ],
    [
      'title' => t('Post a job vacancy'),
      'url' => Url::fromUri('internal:/node/add/job'),
      'description' => t('Advertise job, consulting and internships vacancies.'),
    ],
    [
      'title' => t('Post a training program'),
      'url' => Url::fromUri('internal:/node/add/training'),
      'description' => t('Advertise training programs for the humanitarian community.'),
    ],
    [
      'title' => t('Post a report'),
      'url' => Url::fromUri('internal:/node/add/report'),
      'description' => t('Post a report for the humanitarian community.'),
    ],
    [
      'title' => t('View your posts'),
      'url' => Url::fromUri('internal:/user/' . $user->id() . '/posts'),
      'description' => t('Manage the Job vacancies, Training programs or Reports you posted.'),
    ],
  ];

  // Only keep links the user has access to.
  foreach ($potential_links as $link_info) {
    if ($link_info['url']->access($user)) {
      $links[] = [
        '#type' => 'link',
        '#title' => $link_info['title'],
        '#url' => $link_info['url'],
        '#attributes' => ['class' => ['user-link']],
        '#suffix' => '<p>' . $link_info['description'] . '</p>',
      ];
    }
  }

  if (!empty($links)) {
    $variables['user_links'] = [
      '#theme' => 'item_list',
      '#items' => $links,
      '#attributes' => ['class' => ['user-links-list']],
    ];
  }
}

/**
 * Implements hook_user_login().
 */
function reliefweb_users_user_login(UserInterface $user): void {
  reliefweb_users_assign_submitter_role($user);
}

/**
 * Assign the submitter role to a user.
 *
 * @param \Drupal\user\UserInterface $user
 *   User account.
 */
function reliefweb_users_assign_submitter_role(UserInterface $user): void {
  // Skip if the user already has an editing role.
  if ($user->hasRole('editor') || $user->hasRole('contributor') || $user->hasRole('submitter')) {
    return;
  }

  // Retrieve the user email address.
  $email = $user->getEmail();
  if (empty($email) || strpos($email, '@') === FALSE) {
    return;
  }

  // Retrieve the list of domains allowed for automatic assignment of the
  // submitter role.
  $domains = \Drupal::state()->get('reliefweb_users_submitter_allowed_domains', ['un.org']);
  if (empty($domains)) {
    return;
  }

  // Check if the email address's domain is allowed.
  [, $domain] = explode('@', $email, 2);
  if (!in_array($domain, $domains)) {
    return;
  }

  // Check if the user has a connected entraid account.
  $uid = \Drupal::database()
    ->select('authmap', 'am')
    ->fields('am', ['uid'])
    ->condition('am.provider', 'openid_connect.entraid', '=')
    ->condition('am.uid', $user->id(), '=')
    ->execute()
    ?->fetchField();
  if (empty($uid)) {
    return;
  }

  // Load the system user.
  $system_user = User::load(2);
  if (empty($system_user)) {
    return;
  }

  // Switch the current user to the system user temporarily so that the
  // user history record shows the system user as modification user.
  // @see reliefweb_user_history_user_entity_to_record().
  $account_switcher = \Drupal::service('account_switcher');
  $account_switcher->switchTo($system_user);

  try {
    // Add the new role.
    $user->addRole('submitter');
    $user->save();
    \Drupal::logger('reliefweb_users')->info(strtr('Assigned submitter role to user @id', [
      '@id' => $user->id(),
    ]));
  }
  catch (\Exception $exception) {
    \Drupal::logger('reliefweb_users')->info(strtr('Unable to assign submitter role to user @id: @error', [
      '@id' => $user->id(),
      '@error' => $exception->getMessage(),
    ]));
  }
  finally {
    // Make sure we switch back to the current user.
    $account_switcher->switchBack();
  }
}
