<?php

/**
 * @file
 * Theme declaration etc. for the reliefweb_moderation module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\reliefweb_moderation\EntityModeratedInterface;
use Drupal\reliefweb_moderation\ModeratedNodeStorageSchema;
use Drupal\reliefweb_moderation\ModeratedTermStorageSchema;
use Drupal\reliefweb_moderation\ModerationServiceBase;
use Drupal\reliefweb_utility\Helpers\EntityHelper;

/**
 * Implements hook_theme().
 */
function reliefweb_moderation_theme() {
  $themes = [
    'reliefweb_moderation_page' => [
      'variables' => [
        // Entity list filters.
        'filters' => NULL,
        // Attributes for the filters.
        'filters_attributes' => NULL,
        // List of entities. @see reliefweb_moderation_table below.
        'list' => NULL,
        // Attributes for the list.
        'list_attributes' => NULL,
      ],
    ],
    'reliefweb_moderation_table' => [
      'variables' => [
        // Count of results per status. @see reliefweb_moderation_totals below.
        'totals' => NULL,
        // Headers for the table with the list of entities. In general it will
        // contain a header for the edit links, a header for the main entity
        // data and a header for the date, notably used for sorting.
        'headers' => [],
        // Table rows with entity information. It should contain cells as
        // describe above for the headers.
        'rows' => [],
        // Message for when there are no results.
        'empty' => '',
        // Pager.
        'pager' => NULL,
      ],
    ],
    'reliefweb_moderation_totals' => [
      'variables' => [
        // Associative array. Each item has the following keys:
        // - status: entity status
        // - label: entity status label
        // - total: number of entities with that status.
        'totals' => NULL,
      ],
    ],
    // Template for the moderation information (status, revision log message).
    'reliefweb_moderation_information' => [
      'variables' => [
        // Associative array with the moderation status value and its label.
        'status' => [],
        // Associative array with the type of message (feedback or
        // instruction), the message content and the message author.
        'message' => [],
      ],
    ],
    // Template to display a user posting right.
    'reliefweb_moderation_user_posting_right' => [
      'variables' => [
        // Wrapper attributes.
        'attributes' => NULL,
        // User posting right.
        'right' => '',
      ],
    ],
  ];
  return $themes;
}

/**
 * Implements hook_entity_base_field_info().
 */
function reliefweb_moderation_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  switch ($entity_type->id()) {
    case 'node':
      $fields['moderation_status'] = reliefweb_moderation_get_moderation_status_field_definition('draft');
      break;

    case 'taxonomy_term':
      $fields['moderation_status'] = reliefweb_moderation_get_moderation_status_field_definition('published');
      break;
  }

  return $fields;
}

/**
 * Implements hook_entity_type_alter().
 */
function reliefweb_moderation_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setHandlerClass('storage_schema', ModeratedNodeStorageSchema::class);
  }
  if (isset($entity_types['taxonomy_term'])) {
    $entity_types['taxonomy_term']->setHandlerClass('storage_schema', ModeratedTermStorageSchema::class);
  }
}

/**
 * Get the moderation status field definition.
 *
 * @param string $default_status
 *   The default moderation status value.
 *
 * @return \Drupal\Core\Field\BaseFieldDefinition
 *   Field definition.
 */
function reliefweb_moderation_get_moderation_status_field_definition($default_status = 'draft') {
  return BaseFieldDefinition::create('string')
    ->setLabel(t('Moderation Status'))
    ->setSetting('max_length', 32)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setDefaultValue($default_status)
    ->setDefaultValueCallback('reliefweb_moderation_moderation_status_value_callback');
}

/**
 * Moderation status default value callback.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 *   The moderation status field definition for the entity.
 *
 * @return string|null
 *   The moderation status if applicable for the
 */
function reliefweb_moderation_moderation_status_value_callback(EntityInterface $entity, FieldDefinitionInterface $field_definition) {
  if ($entity instanceof EntityModeratedInterface) {
    return $entity->getDefaultModerationStatus();
  }
  return $field_definition->getDefaultValueLiteral();
}

/**
 * Implements hook_entity_access().
 *
 * Drupal's AccessResultNeutral is actually not neutral depending on
 * the context: route access check ("andIf" -> Neutral = Deny) versus
 * entity only access check ("orIf" -> Neutral = Neutral). So to
 * prevent showing a 403 due to us returning an AccessResultNeutral, we
 * return NULL instead which will make ModuleHandler::invokeAll() ignore
 * the result.
 *
 * @see https://www.drupal.org/project/drupal/issues/2991698
 * @see \Drupal\Core\Entity\EntityAccessControlHandler::processAccessHookResults()
 * @see \Drupal\Core\Access\AccessManager\check()
 * @see \Drupal\Core\Extension\ModuleHandler::invokeAll()
 */
function reliefweb_moderation_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity instanceof EntityModeratedInterface) {
    $service = ModerationServiceBase::getModerationService($entity->bundle());
    if (!empty($service)) {
      $access_result = $service->entityAccess($entity, $operation, $account);
      if (!$access_result->isNeutral()) {
        return $access_result;
      }
    }
  }
  return NULL;
}

/**
 * Implements hook_entity_create_access().
 */
function reliefweb_moderation_entity_create_access(AccountInterface $account, array $context, ?string $entity_bundle): ?AccessResultInterface {
  if (!empty($entity_bundle)) {
    $service = ModerationServiceBase::getModerationService($entity_bundle);
    if (!empty($service)) {
      $access_result = $service->entityCreateAccess($account);
      if (!$access_result->isNeutral()) {
        return $access_result;
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_presave().
 */
function reliefweb_moderation_entity_presave(EntityInterface $entity) {
  if ($entity instanceof EntityModeratedInterface) {
    $service = ModerationServiceBase::getModerationService($entity->bundle());
    if (!empty($service)) {
      $service->entityPresave($entity);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Add the moderation information block to entity pages and forms.
 */
function reliefweb_moderation_preprocess_page(&$variables) {
  $user = \Drupal::currentUser();

  // For existing revisionable and moderated entities, add the moderation
  // information at the top of the entity page/form.
  $entity = EntityHelper::getEntityFromRoute();
  if (empty($entity) || $entity->isNew() || !($entity instanceof EntityModeratedInterface)) {
    return;
  }

  $element = [
    '#theme' => 'reliefweb_moderation_information',
    // Display the moderation information before the page title and local
    // tasks.
    '#weight' => -100,
    '#cache' => [
      '#contexts' => [
        'user.permissions',
      ],
      '#tags' => [
        $entity->getEntityTypeId() . ':' . $entity->id(),
      ],
    ],
    '#access' => $entity->access('view_moderation_information'),
  ];

  // Get the moderation status.
  if ($user->hasPermission('view moderation information status')) {
    $element['#status'] = [
      'value' => $entity->getModerationStatus(),
      'label' => $entity->getModerationStatusLabel(),
    ];
  }

  // Get the moderation revision message.
  //
  // Note: when comming back from the preview, the original revision log will
  // not be available...
  if ($user->hasPermission('view moderation information revision message')) {
    $message = $entity->getOriginalRevisionLogMessage();
    if (!empty($message)) {
      $element['#message'] = [
        'type' => $entity->getOriginalRevisionLogMessageType(),
        'content' => EntityHelper::formatRevisionLogMessage($message),
      ];

      if ($user->hasPermission('view moderation information revision message author')) {
        $element['#message']['author'] = $entity->getOriginalRevisionUser();
      }
    }
  }

  $variables['page']['content']['moderation-information'] = $element;

  // If the document is unpublished, show a status indicate it.
  if (!$entity->isPublishedModerationStatus()) {
    $variables['page']['content']['moderation-unpublished'] = [
      '#theme' => 'reliefweb_moderation_information',
      '#status' => [
        'value' => t('unpublished'),
        'label' => t('Unpublished'),
      ],
      '#weight' => -99,
      '#cache' => [
        '#contexts' => [
          'user.permissions',
        ],
        '#tags' => [
          $entity->getEntityTypeId() . ':' . $entity->id(),
        ],
      ],
      '#access' => $entity->access('view'),
    ];
  }
}

/**
 * Get the moderation status label for the given entity bundle and status.
 *
 * @param string $bundle
 *   Entity bundle.
 * @param string $status
 *   Entity moderation status.
 *
 * @return string
 *   The moderation status label.
 */
function reliefweb_moderation_get_moderation_status_label($bundle, $status) {
  $service = ModerationServiceBase::getModerationService($bundle);
  if (!empty($service)) {
    $statuses = $service->getStatuses();
    if (isset($statuses[$status])) {
      return $statuses[$status];
    }
  }
  return ucfirst($status);
}
