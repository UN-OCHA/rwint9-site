<?php

/**
 * @file
 * Install file for reliefweb_moderation.
 */

use Drupal\reliefweb_moderation\ModeratedNodeStorageSchema;
use Drupal\reliefweb_moderation\ModeratedTermStorageSchema;

/**
 * Implements hook_install().
 *
 * @see https://www.drupal.org/node/2554097
 * @see https://www.drupal.org/project/drupal/issues/2258347
 */
function reliefweb_moderation_install() {
  reliefweb_moderation_add_moderation_status('node', ModeratedNodeStorageSchema::class, 'draft');
  reliefweb_moderation_add_moderation_status('taxonomy_term', ModeratedTermStorageSchema::class, 'published');
}

/**
 * Add a moderation status base field to an entity type.
 *
 * @param string $entity_type_id
 *   Entity type ID.
 * @param string $storage_schema_class
 *   Class to use for the entity type storage schema.
 * @param string $default_status
 *   The default moderation status value.
 */
function reliefweb_moderation_add_moderation_status($entity_type_id, $storage_schema_class, $default_status = 'draft') {
  $logger = \Drupal::logger('reliefweb_moderation');
  $manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $manager->getEntityType($entity_type_id);

  // Validate what we need to add the moderation status field.
  if (empty($entity_type)) {
    $logger->error(strtr('Moderation status: missing entity type @entity_type_id.', [
      '@entity_type_id' => $entity_type_id,
    ]));
    return;
  }
  if (!class_exists($storage_schema_class)) {
    $logger->error(strtr('Moderation status: missing storage schema class @storage_schema_class.', [
      '@storage_schema_class' => $storage_schema_class,
    ]));
    return;
  }

  $current_storage_schema_class = $entity_type->getHandlerClass('storage_schema');
  $storage_schema_class_updated = FALSE;

  // If there is no specific storage schema class, assume it's using the base
  // one.
  if (empty($current_storage_schema_class)) {
    $current_storage_schema_class = '\Drupal\Core\Entity\Sql\SqlContentEntityStorageSchema';
  }

  // Change the storage handler to something that can add the indexes on the
  // moderation status.
  //
  // This is ridiculous but drupal doesn't provide a hook_entity_schema_alter
  // that could allow us to simply add the indexes.
  //
  // @see https://www.drupal.org/project/drupal/issues/2258347
  if ($current_storage_schema_class === $storage_schema_class) {
    $logger->notice(strtr('Moderation status: entity type already using the storage schema class @storage_schema_class', [
      '@storage_schema_class' => $storage_schema_class,
    ]));
  }
  elseif (!is_subclass_of($storage_schema_class, $current_storage_schema_class)) {
    $logger->error(strtr('Moderation status: storage schema class @storage_schema_class is not a subclass of @current_storage_schema_class', [
      '@storage_schema_class' => $storage_schema_class,
      '@current_storage_schema_class' => $current_storage_schema_class,
    ]));
    return;
  }
  else {
    $entity_type->setHandlerClass('storage_schema', $storage_schema_class);
    $manager->updateEntityType($entity_type);
    $storage_schema_class_updated = TRUE;
  }

  // Add the moderation status base field.
  $definition = $manager->getFieldStorageDefinition('moderation_status', $entity_type_id);
  if (empty($definition)) {
    $definition = reliefweb_moderation_get_moderation_status_field_definition($default_status);

    // Add the moderation status field, this should trigger an update on the
    // entity type and add the indexes.
    $manager->installFieldStorageDefinition('moderation_status', $entity_type_id, $entity_type_id, $definition);
  }
  // If the storage schema class was updated, we need to trigger a fake field
  // update so that the indexes are added.
  //
  // @see https://www.drupal.org/node/2554245.
  // @see https://www.drupal.org/project/drupal/issues/3005447
  elseif ($storage_schema_class_updated) {
    $manager->updateFieldStorageDefinition($definition);
  }
}
