<?php

/**
 * @file
 * ReliefWeb Docstore module file.
 */

use Drupal\file\Entity\File;

/**
 * Implements hook_theme().
 */
function reliefweb_docstore_theme() {
  return [
    'reliefweb_file_widget' => [
      'render element' => 'element',
    ],
    'reliefweb_file_widget_item' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implemenents hook_preprocess_HOOK() for "reliefweb_file_widget".
 */
function reliefweb_docstore_preprocess_reliefweb_file_widget(&$variables) {
  $element = &$variables['element'];

  if (!isset($element['#attributes'])) {
    $element['#attributes'] = [];
  }

  if (!isset($element['#attributes']['id']) && isset($element['#id'])) {
    $element['#attributes']['id'] = $element['#id'];
  }

  if (isset($element['#attributes']['id'])) {
    drupal_attach_tabledrag($element, [
      'table_id' => $element['#attributes']['id'] . '-table',
      'action' => 'order',
      'relationship' => 'sibling',
      'group' => 'draggable-weight',
    ]);
  }

  $variables['attributes'] = $element['#attributes'];
}

/**
 * Implemenents hook_preprocess_HOOK() for "reliefweb_file_widget_item".
 */
function reliefweb_docstore_preprocess_reliefweb_file_widget_item(&$variables) {
  $element = &$variables['element'];

  if (!isset($element['#attributes'])) {
    $element['#attributes'] = [];
  }

  if (isset($element['weight'])) {
    $element['weight']['#attributes']['class'][] = 'draggable-weight';
  }
}

/**
 * Implemenents hook_preprocess_HOOK() for "image_style".
 */
function reliefweb_docstore_preprocess_image_style(&$variables) {
  // Workaround to prevent the browser from caching the derivative when
  // renderd in the form for example, so that it always get the fresh one
  // when the image is regenerated.
  if (isset($variables['image']['#attributes']['data-no-cache'])) {
    $uri = $variables['image']['#uri'];
    $uri .= (strpos($uri, '?') !== FALSE ? '&' : '?') . 'time=' . microtime(TRUE);
    $variables['image']['#uri'] = $uri;
    unset($variables['image']['#attributes']['data-no-cache']);
  }
}

/**
 * Get the list of languages supported by ReliefWeb.
 *
 * @return array
 *   List of languages keyed by their ISO 639-1 code.
 */
function reliefweb_docstore_get_languages() {
  static $languages;

  if (!isset($languages)) {
    $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
    $bundle_key = $storage->getEntityType()->getkey('bundle');
    $entities = $storage->loadByProperties([$bundle_key => 'language']);

    $languages = [];
    foreach ($entities as $entity) {
      $code = $entity->field_language_code->value;
      if (!empty($code)) {
        $languages[$code] = $entity->label();
      }
    }
  }

  return $languages;
}

/**
 * Validate the mime type of file.
 *
 * @param \Drupal\file\Entity\File $file
 *   File entity to validate.
 * @param string $mime_type
 *   Mime type to compare with.
 *
 * @return bool
 *   An empty array if the file mime type is a match or an array containing an
 *   error message if it's not.
 *
 * @see file_validate()
 */
function reliefweb_docostore_file_validate_mime_type(File $file, $mime_type) {
  $errors = [];

  if ($file->getMimeType() !== $mime_type) {
    $errors[] = t('The file mime type is not %mime_type.', [
      '%mime_type' => $mime_type,
    ]);
  }

  return $errors;
}
