<?php

/**
 * @file
 * ReliefWeb Docstore module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\file\Entity\File;
use Drupal\reliefweb_docstore\Plugin\Field\FieldType\ReliefWebFileList;

/**
 * Implements hook_theme().
 */
function reliefweb_docstore_theme() {
  return [
    // Theme for a file list form widget.
    'reliefweb_file_widget' => [
      'render element' => 'element',
    ],
    // Theme for a file item form widget.
    'reliefweb_file_widget_item' => [
      'render element' => 'element',
    ],
    // Theme for a list of files.
    'reliefweb_file_list' => [
      'variables' => [
        // Section heading level.
        'level' => 2,
        // Section attributes.
        'attributes' => NULL,
        // Section title.
        'title' => t('Attachments'),
        // Section title attributes.
        'title_attributes' => NULL,
        // List of files. Each item has the following properties:
        // - item: field item
        // - url: link to the file
        // - name: file name
        // - label: file name or 'Download' etc.
        // - description: file description (extension, size, language etc.)
        'list' => [],
        // List attributes.
        'list_attributes' => NULL,
        // Section footer.
        'footer' => NULL,
        // Section footer attributes.
        'footer_attributes' => NULL,
      ],
    ],
  ];
}

/**
 * Implemenents hook_preprocess_HOOK() for "image_style".
 */
function reliefweb_docstore_preprocess_image_style(&$variables) {
  // Workaround to prevent the browser from caching the derivative when
  // rendered in the form for example, so that it always get the fresh one
  // when the image is regenerated.
  if (isset($variables['image']['#attributes']['data-no-cache'])) {
    $uri = $variables['image']['#uri'];
    $uri .= (strpos($uri, '?') !== FALSE ? '&' : '?') . 'time=' . microtime(TRUE);
    $variables['image']['#uri'] = $uri;
    unset($variables['image']['#attributes']['data-no-cache']);
  }
}

/**
 * Get the list of languages supported by ReliefWeb.
 *
 * @return array
 *   List of languages keyed by their ISO 639-1 code.
 */
function reliefweb_docstore_get_languages() {
  static $languages;

  if (!isset($languages)) {
    $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
    $bundle_key = $storage->getEntityType()->getkey('bundle');
    $entities = $storage->loadByProperties([$bundle_key => 'language']);

    $languages = [];
    foreach ($entities as $entity) {
      $code = $entity->field_language_code->value;
      if (!empty($code)) {
        $languages[$code] = $entity->label();
      }
    }
  }

  return $languages;
}

/**
 * Validate the mime type of file.
 *
 * @param \Drupal\file\Entity\File $file
 *   File entity to validate.
 * @param string $mime_type
 *   Mime type to compare with.
 *
 * @return array
 *   An empty array if the file mime type is a match or an array containing an
 *   error message if it's not.
 *
 * @see file_validate()
 */
function reliefweb_docstore_file_validate_mime_type(File $file, $mime_type) {
  $errors = [];

  if ($file->getMimeType() !== $mime_type) {
    $errors[] = t('The file mime type is not %mime_type.', [
      '%mime_type' => $mime_type,
    ]);
  }

  return $errors;
}

/**
 * Implements hook_reliefweb_utility_file_update_alter().
 */
function reliefweb_docstore_reliefweb_utility_file_update_alter(File $file, &$apply) {
  $settings = \Drupal::config('reliefweb_docstore.settings');

  // Get the attachment and preview directories.
  $file_directory = $settings->get('file_directory') ?? 'attachments';
  $preview_directory = $settings->get('preview_directory') ?? 'previews';
  $directories = [preg_quote($file_directory), preg_quote($preview_directory)];

  // Pattern for the preview files.
  $pattern = '#^(?:private|public)://(?:' .
             implode('|', $directories) .
             ')/([a-z0-9]{2})/([a-z0-9]{2})/\1\2[a-z0-9-]{32}\.#';

  // Do not apply the file URI transformation for files managed by this module.
  $apply = $apply && preg_match($pattern, $file->getFileUri()) !== 1;
}

/**
 * Implements hook_entity_revision_delete().
 */
function reliefweb_docstore_entity_revision_delete(EntityInterface $entity) {
  // @todo remove when removing `reliefweb_migrate`.
  if (!empty($entity->_is_migrating)) {
    return;
  }
  // Drupal doesn't invoke any postRevisionDelete on the field items so this is
  // the only way to perform post revision deletion tasks.
  //
  // Check if the entity has any reliefweb_file field, in which case we
  // invoke ::updateRemoteDocumentFileReferences() to update remote file
  // references in the remote document resource associated with the resource.
  foreach ($entity as $field) {
    if ($field instanceof ReliefWebFileList) {
      $field->updateRemoteDocumentFileReferences();
      // No need to continue as calling the above method on one of the
      // reliefweb_file field of the entity is enough to update the remote
      // file references.
      break;
    }
  }
}
